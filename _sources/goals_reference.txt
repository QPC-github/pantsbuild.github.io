***************
Goals Reference
***************

This page documents ``goals``, actions that can be taken on build targets.
A goal identifies some high-level goal that you wish to accomplish, such as
compiling your code.

A goal depends on other goals that must happen first; for example, Pants must
compile code before it can run tests.

Each goal is implemented by one or more Tasks. For example, the
``JavaCompile`` task compiles Java code, and its installed in the ``compile``
goal.


**Goals and Tasks summary**

  * :ref:`gref_goal_bench` - None
  * :ref:`gref_goal_binary` - Create a jvm binary jar.
  * :ref:`gref_goal_bootstrap` - Bootstrap tools needed for building.
  * :ref:`gref_goal_builddict` - None
  * :ref:`gref_goal_buildlint` - None
  * :ref:`gref_goal_bundle` - Create an application bundle from binary targets.
  * :ref:`gref_goal_changed` - Print the targets changed since some prior commit.
  * :ref:`gref_goal_check-exclusives` - Check for exclusivity violations.
  * :ref:`gref_goal_check_published_deps` - Find references to outdated artifacts.
  * :ref:`gref_goal_clean-all` - Clean all build output.
  * :ref:`gref_goal_clean-all-async` - [deprecated] Clean all build output in a background process.
  * :ref:`gref_goal_compile` - Scala source code style check.
  * :ref:`gref_goal_dependees` - Print the target's dependees.
  * :ref:`gref_goal_dependencies` - Print the target's dependencies.
  * :ref:`gref_goal_depmap` - Depict the target's dependencies.
  * :ref:`gref_goal_detect-duplicates` - Detect duplicate classes and resources on the classpath.
  * :ref:`gref_goal_dex` - None
  * :ref:`gref_goal_doc` - Create documentation.
  * :ref:`gref_goal_eclipse` - Create an Eclipse project from the given targets.
  * :ref:`gref_goal_ensime` - Create an Ensime project from the given targets.
  * :ref:`gref_goal_filedeps` - Print out the source and BUILD files the target depends on.
  * :ref:`gref_goal_filemap` - Outputs a mapping from source file to owning target.
  * :ref:`gref_goal_filter` - Filter the input targets based on various criteria.
  * :ref:`gref_goal_gen` - Generate code.
  * :ref:`gref_goal_goals` - List all documented goals.
  * :ref:`gref_goal_idea` - Create an IntelliJ IDEA project from the given targets.
  * :ref:`gref_goal_imports` - None
  * :ref:`gref_goal_invalidate` - Invalidate all targets.
  * :ref:`gref_goal_jar` - None
  * :ref:`gref_goal_killserver` - Kill the reporting server.
  * :ref:`gref_goal_list` - List available BUILD targets.
  * :ref:`gref_goal_markdown` - Generate html from markdown docs.
  * :ref:`gref_goal_minimize` - Print the minimal cover of the given targets.
  * :ref:`gref_goal_ng-killall` - Kill running nailgun servers.
  * :ref:`gref_goal_path` - Find a dependency path from one target to another.
  * :ref:`gref_goal_pathdeps` - Print out all paths containing BUILD files the target depends on.
  * :ref:`gref_goal_paths` - Find all dependency paths from one target to another.
  * :ref:`gref_goal_provides` - Print the symbols provided by the given targets.
  * :ref:`gref_goal_publish` - Publish artifacts.
  * :ref:`gref_goal_repl` - Run a REPL.
  * :ref:`gref_goal_repl-dirty` - Run a REPL, skipping compilation.
  * :ref:`gref_goal_resolve` - Resolve dependencies and produce dependency reports.
  * :ref:`gref_goal_resources` - None
  * :ref:`gref_goal_roots` - Print the workspace's source roots and associated target types.
  * :ref:`gref_goal_run` - Run a binary target.
  * :ref:`gref_goal_run-dirty` - Run a binary target, skipping compilation.
  * :ref:`gref_goal_server` - Run the pants reporting server.
  * :ref:`gref_goal_sign` - None
  * :ref:`gref_goal_sitegen` - Generate static web site.
  * :ref:`gref_goal_sort` - Topologically sort the targets.
  * :ref:`gref_goal_targets` - List target types and BUILD file symbols (python_tests, jar, etc).
  * :ref:`gref_goal_test` - Test compiled code.
  * :ref:`gref_goal_thrift-linter` - Check thrift files for non-recommended usage patterns.


.. _gref_goal_bench:

bench
-----------------------------------------------------------------------------



.. _gref_cli_bench:

*
  **bench**
  Implemented by ``pants.backend.jvm.tasks.benchmark_run.BenchmarkRun``



  * | ``--jvm-options``
      ``str``
    |
      Run the jvm with these extra jvm options.

  * | ``--args``
      ``str``
    |
      Run the jvm with these extra program args.

  * | ``--[no-]debug``
      ``bool``
    |
      Run the jvm under a debugger.

  * | ``--confs``
      ``str``
      (Default: ``[u'default']``)
    |
      Use only these Ivy configurations of external deps.

  * | ``--target``
      ``str``
    |
      Name of the benchmark class. This is a mandatory argument.

  * | ``--[no-]memory``
      ``bool``
    |
      Enable memory profiling.




**Other command-line options:**

  `Common`_



.. _gref_goal_binary:

binary
-----------------------------------------------------------------------------

Create a jvm binary jar.


.. _gref_cli_binarypythonbinarycreate:

*
  **binary.python-binary-create**
  Implemented by ``pants.backend.python.tasks.python_binary_create.PythonBinaryCreate``



  * | ``--timeout``
      ``int``
    |
      Number of seconds to wait for http connections.



.. _gref_cli_binary:

*
  **binary**
  Implemented by ``pants.backend.jvm.tasks.binary_create.BinaryCreate``





.. _gref_cli_binarydup:

*
  **binary.dup**
  Implemented by ``pants.backend.jvm.tasks.detect_duplicates.DuplicateDetector``



  * | ``--[no-]fail-fast``
      ``bool``
    |
      Fail fast if duplicate classes/resources are found.

  * | ``--excludes``
      ``str``
      (Default: ``[u'dependencies,license,notice,.DS_Store,notice.txt,cmdline.arg.info.txt.1,license.txt']``)
    |
      Case insensitive filenames (without directory) to exclude from duplicate check. Filenames can be specified in a comma-separated list or by using multiple instances of this flag.

  * | ``--max-dups``
      ``int``
      (Default: ``10``)
    |
      Maximum number of duplicate classes to display per artifact.




**Other command-line options:**

  `Common`_



.. _gref_goal_bootstrap:

bootstrap
-----------------------------------------------------------------------------

Bootstrap tools needed for building.


.. _gref_cli_bootstrapbootstrapjvmtools:

*
  **bootstrap.bootstrap-jvm-tools**
  Implemented by ``pants.backend.jvm.tasks.bootstrap_jvm_tools.BootstrapJvmTools``






**Other command-line options:**

  `Common`_



.. _gref_goal_builddict:

builddict
-----------------------------------------------------------------------------



.. _gref_cli_builddict:

*
  **builddict**
  Implemented by ``pants.backend.core.tasks.builddictionary.BuildBuildDictionary``






**Other command-line options:**

  `Common`_



.. _gref_goal_buildlint:

buildlint
-----------------------------------------------------------------------------



.. _gref_cli_buildlint:

*
  **buildlint**
  Implemented by ``pants.backend.core.tasks.build_lint.BuildLint``



  * | ``--[no-]transitive``
      ``bool``
    |
      Apply lint rules transitively to all dependency buildfiles.

  * | ``--[no-]include-intransitive-deps``
      ``bool``
    |
      Correct both simple missing dependencies and intransitive missing deps.

  * | ``--action``
      ``str``
    |
      diff=print out diffs, rewrite=apply changes to BUILD files directly.




**Other command-line options:**

  `Common`_



.. _gref_goal_bundle:

bundle
-----------------------------------------------------------------------------

Create an application bundle from binary targets.


.. _gref_cli_bundle:

*
  **bundle**
  Implemented by ``pants.backend.jvm.tasks.bundle_create.BundleCreate``



  * | ``--[no-]deployjar``
      ``bool``
    |
      Expand 3rdparty jars into loose classfiles in the bundle's root dir. If unset, the root will contain internal classfiles only, and 3rdparty jars will go into the bundle's libs dir.

  * | ``--archive``
      ``str``
    |
      Create an archive of this type from the bundle.

  * | ``--[no-]archive-prefix``
      ``bool``
    |
      If --archive is specified, use the target basename as the path prefix.



.. _gref_cli_bundledup:

*
  **bundle.dup**
  Implemented by ``pants.backend.jvm.tasks.detect_duplicates.DuplicateDetector``



  * | ``--[no-]fail-fast``
      ``bool``
    |
      Fail fast if duplicate classes/resources are found.

  * | ``--excludes``
      ``str``
      (Default: ``[u'dependencies,license,notice,.DS_Store,notice.txt,cmdline.arg.info.txt.1,license.txt']``)
    |
      Case insensitive filenames (without directory) to exclude from duplicate check. Filenames can be specified in a comma-separated list or by using multiple instances of this flag.

  * | ``--max-dups``
      ``int``
      (Default: ``10``)
    |
      Maximum number of duplicate classes to display per artifact.



.. _gref_cli_bundleapk:

*
  **bundle.apk**
  Implemented by ``pants.backend.android.tasks.aapt_builder.AaptBuilder``



  * | ``--sdk-path``
      ``str``
    |
      Use the Android SDK at this path.

  * | ``--target-sdk``
      ``str``
    |
      Use this Android SDK to compile resources. Overrides AndroidManifest.xml.

  * | ``--build-tools-version``
      ``str``
    |
      Use this Android build-tools version to compile resources.

  * | ``--ignored-assets``
      ``str``
      (Default: ``!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir&gt;_*:!CVS:!thumbs.db:!picasa.ini:!*~:BUILD*``)
    |
      Patterns the aapt tools should ignore as they search the resource_dir.




**Other command-line options:**

  `Common`_



.. _gref_goal_changed:

changed
-----------------------------------------------------------------------------

Print the targets changed since some prior commit.


.. _gref_cli_changed:

*
  **changed**
  Implemented by ``pants.backend.core.tasks.what_changed.WhatChanged``



  * | ``--sep``
      ``str``
      (Default: ``\n``)
    |
      String to use to separate results.

  * | ``--output-file``
      ``str``
    |
      Write the console output to this file instead.

  * | ``--parent``
      ``str``
      (Default: ``HEAD``)
    |
      Calculate changes against this tree-ish.

  * | ``--[no-]files``
      ``bool``
    |
      Show changed files instead of the targets that own them.




**Other command-line options:**

  `Common`_



.. _gref_goal_check-exclusives:

check-exclusives
-----------------------------------------------------------------------------

Check for exclusivity violations.


.. _gref_cli_checkexclusives:

*
  **check-exclusives**
  Implemented by ``pants.backend.core.tasks.check_exclusives.CheckExclusives``



  * | ``--[no-]error-on-collision``
      ``bool``
      (Default: ``True``)
    |
      Abort the build if an exclusives collision is detected.




**Other command-line options:**

  `Common`_



.. _gref_goal_check_published_deps:

check_published_deps
-----------------------------------------------------------------------------

Find references to outdated artifacts.


.. _gref_cli_checkpublisheddeps:

*
  **check_published_deps**
  Implemented by ``pants.backend.jvm.tasks.check_published_deps.CheckPublishedDeps``



  * | ``--sep``
      ``str``
      (Default: ``\n``)
    |
      String to use to separate results.

  * | ``--output-file``
      ``str``
    |
      Write the console output to this file instead.

  * | ``--[no-]print-uptodate``
      ``bool``
    |
      Print up-to-date dependencies.




**Other command-line options:**

  `Common`_



.. _gref_goal_clean-all:

clean-all
-----------------------------------------------------------------------------

Clean all build output.


.. _gref_cli_cleanallngkillall:

*
  **clean-all.ng-killall**
  Implemented by ``pants.backend.jvm.tasks.nailgun_task.NailgunKillall``



  * | ``--[no-]everywhere``
      ``bool``
    |
      Kill all nailguns servers launched by pants for all workspaces on the system.



.. _gref_cli_cleanallinvalidate:

*
  **clean-all.invalidate**
  Implemented by ``pants.backend.core.tasks.clean.Invalidator``





.. _gref_cli_cleanall:

*
  **clean-all**
  Implemented by ``pants.backend.core.tasks.clean.Cleaner``






**Other command-line options:**

  `Common`_



.. _gref_goal_clean-all-async:

clean-all-async
-----------------------------------------------------------------------------

[deprecated] Clean all build output in a background process.


.. _gref_cli_cleanallasyncngkillall:

*
  **clean-all-async.ng-killall**
  Implemented by ``pants.backend.jvm.tasks.nailgun_task.NailgunKillall``



  * | ``--[no-]everywhere``
      ``bool``
    |
      Kill all nailguns servers launched by pants for all workspaces on the system.



.. _gref_cli_cleanallasyncinvalidate:

*
  **clean-all-async.invalidate**
  Implemented by ``pants.backend.core.tasks.clean.Invalidator``





.. _gref_cli_cleanallasync:

*
  **clean-all-async**
  Implemented by ``pants.backend.core.register.AsyncCleaner``






**Other command-line options:**

  `Common`_



.. _gref_goal_compile:

compile
-----------------------------------------------------------------------------

Scala source code style check.


.. _gref_cli_compilejvm:

*
  **compile.jvm**
  Implemented by ``pants.backend.core.tasks.group_task.SingletonGroupTask``





.. _gref_cli_compilescalastyle:

*
  **compile.scalastyle**
  Implemented by ``pants.backend.jvm.tasks.scalastyle.Scalastyle``



  * | ``--[no-]skip``
      ``bool``
    |
      Skip scalastyle.




**Other command-line options:**

  `Common`_



.. _gref_goal_dependees:

dependees
-----------------------------------------------------------------------------

Print the target's dependees.


.. _gref_cli_dependees:

*
  **dependees**
  Implemented by ``pants.backend.core.tasks.dependees.ReverseDepmap``



  * | ``--sep``
      ``str``
      (Default: ``\n``)
    |
      String to use to separate results.

  * | ``--output-file``
      ``str``
    |
      Write the console output to this file instead.

  * | ``--[no-]transitive``
      ``bool``
    |
      List transitive dependees.

  * | ``--[no-]closed``
      ``bool``
    |
      Include the input targets in the output along with the dependees.

  * | ``--type``
      ``str``
    |
      Identifies target types to include. Multiple type inclusions can be specified at once in a comma separated list or else by using multiple instances of this flag.




**Other command-line options:**

  `Common`_



.. _gref_goal_dependencies:

dependencies
-----------------------------------------------------------------------------

Print the target's dependencies.


.. _gref_cli_dependencies:

*
  **dependencies**
  Implemented by ``pants.backend.jvm.tasks.dependencies.Dependencies``



  * | ``--sep``
      ``str``
      (Default: ``\n``)
    |
      String to use to separate results.

  * | ``--output-file``
      ``str``
    |
      Write the console output to this file instead.

  * | ``--[no-]internal-only``
      ``bool``
    |
      Specifies that only internal dependencies should be included in the graph output (no external jars).

  * | ``--[no-]external-only``
      ``bool``
    |
      Specifies that only external dependencies should be included in the graph output (only external jars).




**Other command-line options:**

  `Common`_



.. _gref_goal_depmap:

depmap
-----------------------------------------------------------------------------

Depict the target's dependencies.


.. _gref_cli_depmap:

*
  **depmap**
  Implemented by ``pants.backend.jvm.tasks.depmap.Depmap``



  * | ``--sep``
      ``str``
      (Default: ``\n``)
    |
      String to use to separate results.

  * | ``--output-file``
      ``str``
    |
      Write the console output to this file instead.

  * | ``--[no-]internal-only``
      ``bool``
    |
      Specifies that only internal dependencies should be included in the graph output (no external jars).

  * | ``--[no-]external-only``
      ``bool``
    |
      Specifies that only external dependencies should be included in the graph output (only external jars).

  * | ``--[no-]minimal``
      ``bool``
    |
      For a textual dependency tree, only prints a dependency the 1st time it is encountered.  For graph output this does nothing.

  * | ``--[no-]graph``
      ``bool``
    |
      Specifies the internal dependency graph should be output in the dot digraph format.

  * | ``--[no-]project-info``
      ``bool``
    |
      Produces a json object with info about the target, including source roots, dependencies, and paths to libraries for their targets and dependencies.

  * | ``--[no-]project-info-formatted``
      ``bool``
      (Default: ``True``)
    |
      Causes project-info output to be a single line of JSON.

  * | ``--separator``
      ``str``
      (Default: ``-``)
    |
      Specifies the separator to use between the org/name/rev components of a dependency's fully qualified name.




**Other command-line options:**

  `Common`_



.. _gref_goal_detect-duplicates:

detect-duplicates
-----------------------------------------------------------------------------

Detect duplicate classes and resources on the classpath.


.. _gref_cli_detectduplicates:

*
  **detect-duplicates**
  Implemented by ``pants.backend.jvm.tasks.detect_duplicates.DuplicateDetector``



  * | ``--[no-]fail-fast``
      ``bool``
    |
      Fail fast if duplicate classes/resources are found.

  * | ``--excludes``
      ``str``
      (Default: ``[u'dependencies,license,notice,.DS_Store,notice.txt,cmdline.arg.info.txt.1,license.txt']``)
    |
      Case insensitive filenames (without directory) to exclude from duplicate check. Filenames can be specified in a comma-separated list or by using multiple instances of this flag.

  * | ``--max-dups``
      ``int``
      (Default: ``10``)
    |
      Maximum number of duplicate classes to display per artifact.




**Other command-line options:**

  `Common`_



.. _gref_goal_dex:

dex
-----------------------------------------------------------------------------



.. _gref_cli_dex:

*
  **dex**
  Implemented by ``pants.backend.android.tasks.dx_compile.DxCompile``



  * | ``--sdk-path``
      ``str``
    |
      Use the Android SDK at this path.

  * | ``--build-tools-version``
      ``str``
    |
      Create the dex file using this version of the Android build tools.

  * | ``--jvm-options``
      ``str``
    |
      Run dx with these JVM options.




**Other command-line options:**

  `Common`_



.. _gref_goal_doc:

doc
-----------------------------------------------------------------------------

Create documentation.


.. _gref_cli_docjavadoc:

*
  **doc.javadoc**
  Implemented by ``pants.backend.jvm.tasks.javadoc_gen.JavadocGen``



  * | ``--jvm-options``
      ``str``
    |
      Run the jvm with these extra jvm options.

  * | ``--args``
      ``str``
    |
      Run the jvm with these extra program args.

  * | ``--[no-]debug``
      ``bool``
    |
      Run the jvm under a debugger.

  * | ``--confs``
      ``str``
      (Default: ``[u'default']``)
    |
      Use only these Ivy configurations of external deps.

  * | ``--[no-]include-codegen``
      ``bool``
    |
      Create javadoc for generated code.

  * | ``--[no-]transitive``
      ``bool``
      (Default: ``True``)
    |
      Create javadoc for the transitive closure of internal targets reachable from the roots specified on the command line.

  * | ``--[no-]combined``
      ``bool``
    |
      Generate javadoc for all targets combined, instead of each target individually.

  * | ``--[no-]open``
      ``bool``
    |
      Open the generated javadoc in a browser (implies --combined).

  * | ``--[no-]ignore-failure``
      ``bool``
    |
      Do not consider javadoc errors to be build errors.

  * | ``--[no-]skip``
      ``bool``
    |
      Skip javadoc generation.



.. _gref_cli_docscaladoc:

*
  **doc.scaladoc**
  Implemented by ``pants.backend.jvm.tasks.scaladoc_gen.ScaladocGen``



  * | ``--jvm-options``
      ``str``
    |
      Run the jvm with these extra jvm options.

  * | ``--args``
      ``str``
    |
      Run the jvm with these extra program args.

  * | ``--[no-]debug``
      ``bool``
    |
      Run the jvm under a debugger.

  * | ``--confs``
      ``str``
      (Default: ``[u'default']``)
    |
      Use only these Ivy configurations of external deps.

  * | ``--[no-]include-codegen``
      ``bool``
    |
      Create scaladoc for generated code.

  * | ``--[no-]transitive``
      ``bool``
      (Default: ``True``)
    |
      Create scaladoc for the transitive closure of internal targets reachable from the roots specified on the command line.

  * | ``--[no-]combined``
      ``bool``
    |
      Generate scaladoc for all targets combined, instead of each target individually.

  * | ``--[no-]open``
      ``bool``
    |
      Open the generated scaladoc in a browser (implies --combined).

  * | ``--[no-]ignore-failure``
      ``bool``
    |
      Do not consider scaladoc errors to be build errors.

  * | ``--[no-]skip``
      ``bool``
    |
      Skip scaladoc generation.




**Other command-line options:**

  `Common`_



.. _gref_goal_eclipse:

eclipse
-----------------------------------------------------------------------------

Create an Eclipse project from the given targets.


.. _gref_cli_eclipse:

*
  **eclipse**
  Implemented by ``pants.backend.jvm.tasks.eclipse_gen.EclipseGen``



  * | ``--project-name``
      ``str``
      (Default: ``project``)
    |
      Specifies the name to use for the generated project.

  * | ``--project-dir``
      ``str``
    |
      Specifies the directory to output the generated project files to.

  * | ``--project-cwd``
      ``str``
    |
      Specifies the directory the generated project should use as the cwd for processes it launches.  Note that specifying this trumps --eclipse-project-dir and not all project related files will be stored there.

  * | ``--[no-]intransitive``
      ``bool``
    |
      Limits the sources included in the generated project to just those owned by the targets specified on the command line.

  * | ``--[no-]python``
      ``bool``
    |
      Adds python support to the generated project configuration.

  * | ``--[no-]java``
      ``bool``
      (Default: ``True``)
    |
      Includes java sources in the project; otherwise compiles them and adds them to the project classpath.

  * | ``--java-language-level``
      ``int``
      (Default: ``7``)
    |
      Sets the java language and jdk used to compile the project's java sources.

  * | ``--java-jdk-name``
      ``str``
    |
      Sets the jdk used to compile the project's java sources. If unset the default jdk name for the --java-language-level is used

  * | ``--[no-]scala``
      ``bool``
      (Default: ``True``)
    |
      Includes scala sources in the project; otherwise compiles them and adds them to the project classpath.

  * | ``--[no-]use-source-root``
      ``bool``
    |
      Use source_root() settings to collapse sourcepaths in project and determine which paths are used for tests.  This is usually what you want if your repo  uses a maven style directory layout.

  * | ``--[no-]infer-test-from-siblings``
      ``bool``
      (Default: ``True``)
    |
      When determining if a path should be added to the IDE, check to see if any of its sibling source_root() entries define test targets.  This is usually what you want so that resource directories under test source roots are picked up as test paths.

  * | ``--version``
      ``str``
      (Default: ``3.6``)
    |
      The Eclipse version the project configuration should be generated for.




**Other command-line options:**

  `Common`_



.. _gref_goal_ensime:

ensime
-----------------------------------------------------------------------------

Create an Ensime project from the given targets.


.. _gref_cli_ensime:

*
  **ensime**
  Implemented by ``pants.backend.jvm.tasks.ensime_gen.EnsimeGen``



  * | ``--project-name``
      ``str``
      (Default: ``project``)
    |
      Specifies the name to use for the generated project.

  * | ``--project-dir``
      ``str``
    |
      Specifies the directory to output the generated project files to.

  * | ``--project-cwd``
      ``str``
    |
      Specifies the directory the generated project should use as the cwd for processes it launches.  Note that specifying this trumps --ensime-project-dir and not all project related files will be stored there.

  * | ``--[no-]intransitive``
      ``bool``
    |
      Limits the sources included in the generated project to just those owned by the targets specified on the command line.

  * | ``--[no-]python``
      ``bool``
    |
      Adds python support to the generated project configuration.

  * | ``--[no-]java``
      ``bool``
      (Default: ``True``)
    |
      Includes java sources in the project; otherwise compiles them and adds them to the project classpath.

  * | ``--java-language-level``
      ``int``
      (Default: ``7``)
    |
      Sets the java language and jdk used to compile the project's java sources.

  * | ``--java-jdk-name``
      ``str``
    |
      Sets the jdk used to compile the project's java sources. If unset the default jdk name for the --java-language-level is used

  * | ``--[no-]scala``
      ``bool``
      (Default: ``True``)
    |
      Includes scala sources in the project; otherwise compiles them and adds them to the project classpath.

  * | ``--[no-]use-source-root``
      ``bool``
    |
      Use source_root() settings to collapse sourcepaths in project and determine which paths are used for tests.  This is usually what you want if your repo  uses a maven style directory layout.

  * | ``--[no-]infer-test-from-siblings``
      ``bool``
      (Default: ``True``)
    |
      When determining if a path should be added to the IDE, check to see if any of its sibling source_root() entries define test targets.  This is usually what you want so that resource directories under test source roots are picked up as test paths.

  * | ``--scala-language-level``
      ``str``
      (Default: ``2.10``)
    |
      Set the scala language level used for Ensime linting.




**Other command-line options:**

  `Common`_



.. _gref_goal_filedeps:

filedeps
-----------------------------------------------------------------------------

Print out the source and BUILD files the target depends on.


.. _gref_cli_filedeps:

*
  **filedeps**
  Implemented by ``pants.backend.jvm.tasks.filedeps.FileDeps``



  * | ``--sep``
      ``str``
      (Default: ``\n``)
    |
      String to use to separate results.

  * | ``--output-file``
      ``str``
    |
      Write the console output to this file instead.




**Other command-line options:**

  `Common`_



.. _gref_goal_filemap:

filemap
-----------------------------------------------------------------------------

Outputs a mapping from source file to owning target.


.. _gref_cli_filemap:

*
  **filemap**
  Implemented by ``pants.backend.core.tasks.filemap.Filemap``



  * | ``--sep``
      ``str``
      (Default: ``\n``)
    |
      String to use to separate results.

  * | ``--output-file``
      ``str``
    |
      Write the console output to this file instead.




**Other command-line options:**

  `Common`_



.. _gref_goal_filter:

filter
-----------------------------------------------------------------------------

Filter the input targets based on various criteria.


.. _gref_cli_filter:

*
  **filter**
  Implemented by ``pants.backend.core.tasks.filter.Filter``



  * | ``--sep``
      ``str``
      (Default: ``\n``)
    |
      String to use to separate results.

  * | ``--output-file``
      ``str``
    |
      Write the console output to this file instead.

  * | ``--type``
      ``str``
    |
      Target types to include (optional '+' prefix) or exclude ('-' prefix).  Multiple type inclusions or exclusions can be specified in a comma-separated list or by using multiple instances of this flag.

  * | ``--target``
      ``str``
    |
      Targets to include (optional '+' prefix) or exclude ('-' prefix).  Multiple target inclusions or exclusions can be specified in a comma-separated list or by using multiple instances of this flag.

  * | ``--ancestor``
      ``str``
    |
      Dependency targets of targets to include (optional '+' prefix) or exclude ('-' prefix).  Multiple ancestor inclusions or exclusions can be specified in a comma-separated list or by using multiple instances of this flag.

  * | ``--regex``
      ``str``
    |
      Regex patterns of target addresses to include (optional '+' prefix) or exclude ('-' prefix).  Multiple target inclusions or exclusions can be specified in a comma-separated list or by using multiple instances of this flag.




**Other command-line options:**

  `Common`_



.. _gref_goal_gen:

gen
-----------------------------------------------------------------------------

Generate code.


.. _gref_cli_genthrift:

*
  **gen.thrift**
  Implemented by ``pants.backend.codegen.tasks.apache_thrift_gen.ApacheThriftGen``



  * | ``--version``
      ``str``
    |
      Thrift compiler version.

  * | ``--lang``
      ``str``
    |
      Force generation of thrift code for these languages.



.. _gref_cli_genscrooge:

*
  **gen.scrooge**
  Implemented by ``pants.backend.codegen.tasks.scrooge_gen.ScroogeGen``



  * | ``--[no-]verbose``
      ``bool``
    |
      Emit verbose output.



.. _gref_cli_genprotoc:

*
  **gen.protoc**
  Implemented by ``pants.backend.codegen.tasks.protobuf_gen.ProtobufGen``



  * | ``--lang``
      ``str``
    |
      Force generation of protobuf code for these languages.



.. _gref_cli_genantlr:

*
  **gen.antlr**
  Implemented by ``pants.backend.codegen.tasks.antlr_gen.AntlrGen``





.. _gref_cli_genragel:

*
  **gen.ragel**
  Implemented by ``pants.backend.codegen.tasks.ragel_gen.RagelGen``





.. _gref_cli_genjaxb:

*
  **gen.jaxb**
  Implemented by ``pants.backend.codegen.tasks.jaxb_gen.JaxbGen``





.. _gref_cli_genaapt:

*
  **gen.aapt**
  Implemented by ``pants.backend.android.tasks.aapt_gen.AaptGen``



  * | ``--sdk-path``
      ``str``
    |
      Use the Android SDK at this path.

  * | ``--target-sdk``
      ``str``
    |
      Use this Android SDK to compile resources. Overrides AndroidManifest.xml.

  * | ``--build-tools-version``
      ``str``
    |
      Use this Android build-tools version to compile resources.

  * | ``--ignored-assets``
      ``str``
      (Default: ``!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir&gt;_*:!CVS:!thumbs.db:!picasa.ini:!*~:BUILD*``)
    |
      Patterns the aapt tools should ignore as they search the resource_dir.




**Other command-line options:**

  `Common`_



.. _gref_goal_goals:

goals
-----------------------------------------------------------------------------

List all documented goals.


.. _gref_cli_goals:

*
  **goals**
  Implemented by ``pants.backend.core.tasks.list_goals.ListGoals``



  * | ``--sep``
      ``str``
      (Default: ``\n``)
    |
      String to use to separate results.

  * | ``--output-file``
      ``str``
    |
      Write the console output to this file instead.

  * | ``--[no-]graph``
      ``bool``
    |
      Generate a graphviz graph of installed goals.

  * | ``--[no-]all``
      ``bool``
    |
      List all goals even if no description is available.




**Other command-line options:**

  `Common`_



.. _gref_goal_idea:

idea
-----------------------------------------------------------------------------

Create an IntelliJ IDEA project from the given targets.


.. _gref_cli_idea:

*
  **idea**
  Implemented by ``pants.backend.jvm.tasks.idea_gen.IdeaGen``



  * | ``--project-name``
      ``str``
      (Default: ``project``)
    |
      Specifies the name to use for the generated project.

  * | ``--project-dir``
      ``str``
    |
      Specifies the directory to output the generated project files to.

  * | ``--project-cwd``
      ``str``
    |
      Specifies the directory the generated project should use as the cwd for processes it launches.  Note that specifying this trumps --idea-project-dir and not all project related files will be stored there.

  * | ``--[no-]intransitive``
      ``bool``
    |
      Limits the sources included in the generated project to just those owned by the targets specified on the command line.

  * | ``--[no-]python``
      ``bool``
    |
      Adds python support to the generated project configuration.

  * | ``--[no-]java``
      ``bool``
      (Default: ``True``)
    |
      Includes java sources in the project; otherwise compiles them and adds them to the project classpath.

  * | ``--java-language-level``
      ``int``
      (Default: ``7``)
    |
      Sets the java language and jdk used to compile the project's java sources.

  * | ``--java-jdk-name``
      ``str``
    |
      Sets the jdk used to compile the project's java sources. If unset the default jdk name for the --java-language-level is used

  * | ``--[no-]scala``
      ``bool``
      (Default: ``True``)
    |
      Includes scala sources in the project; otherwise compiles them and adds them to the project classpath.

  * | ``--[no-]use-source-root``
      ``bool``
    |
      Use source_root() settings to collapse sourcepaths in project and determine which paths are used for tests.  This is usually what you want if your repo  uses a maven style directory layout.

  * | ``--[no-]infer-test-from-siblings``
      ``bool``
      (Default: ``True``)
    |
      When determining if a path should be added to the IDE, check to see if any of its sibling source_root() entries define test targets.  This is usually what you want so that resource directories under test source roots are picked up as test paths.

  * | ``--version``
      ``str``
      (Default: ``11``)
    |
      The IntelliJ IDEA version the project config should be generated for.

  * | ``--[no-]merge``
      ``bool``
      (Default: ``True``)
    |
      Merge any manual customizations in existing Intellij IDEA configuration. If False, manual customizations will be over-written.

  * | ``--[no-]open``
      ``bool``
      (Default: ``True``)
    |
      Attempts to open the generated project in IDEA.

  * | ``--[no-]bash``
      ``bool``
    |
      Adds a bash facet to the generated project configuration.

  * | ``--scala-language-level``
      ``str``
      (Default: ``2.9``)
    |
      Set the scala language level used for IDEA linting.

  * | ``--scala-maximum-heap-size-mb``
      ``str``
      (Default: ``512``)
    |
      Sets the maximum heap size (in megabytes) for scalac.

  * | ``--[no-]fsc``
      ``bool``
    |
      If the project contains any scala targets this specifies the fsc compiler should be enabled.

  * | ``--java-encoding``
      ``str``
      (Default: ``UTF-8``)
    |
      Sets the file encoding for java files in this project.

  * | ``--java-maximum-heap-size-mb``
      ``str``
      (Default: ``512``)
    |
      Sets the maximum heap size (in megabytes) for javac.

  * | ``--[no-]exclude-maven-target``
      ``bool``
    |
      Exclude 'target' directories for directories containing pom.xml files.  These directories contain generated code andcopies of files staged for deployment.




**Other command-line options:**

  `Common`_



.. _gref_goal_imports:

imports
-----------------------------------------------------------------------------



.. _gref_cli_importsivyimports:

*
  **imports.ivy-imports**
  Implemented by ``pants.backend.jvm.tasks.ivy_imports.IvyImports``






**Other command-line options:**

  `Common`_



.. _gref_goal_invalidate:

invalidate
-----------------------------------------------------------------------------

Invalidate all targets.


.. _gref_cli_invalidatengkillall:

*
  **invalidate.ng-killall**
  Implemented by ``pants.backend.jvm.tasks.nailgun_task.NailgunKillall``



  * | ``--[no-]everywhere``
      ``bool``
    |
      Kill all nailguns servers launched by pants for all workspaces on the system.



.. _gref_cli_invalidate:

*
  **invalidate**
  Implemented by ``pants.backend.core.tasks.clean.Invalidator``






**Other command-line options:**

  `Common`_



.. _gref_goal_jar:

jar
-----------------------------------------------------------------------------



.. _gref_cli_jar:

*
  **jar**
  Implemented by ``pants.backend.jvm.tasks.jar_create.JarCreate``



  * | ``--[no-]compressed``
      ``bool``
      (Default: ``True``)
    |
      Create compressed jars.




**Other command-line options:**

  `Common`_



.. _gref_goal_killserver:

killserver
-----------------------------------------------------------------------------

Kill the reporting server.


.. _gref_cli_killserver:

*
  **killserver**
  Implemented by ``pants.backend.core.tasks.reporting_server.KillServer``






**Other command-line options:**

  `Common`_



.. _gref_goal_list:

list
-----------------------------------------------------------------------------

List available BUILD targets.


.. _gref_cli_list:

*
  **list**
  Implemented by ``pants.backend.core.tasks.listtargets.ListTargets``



  * | ``--sep``
      ``str``
      (Default: ``\n``)
    |
      String to use to separate results.

  * | ``--output-file``
      ``str``
    |
      Write the console output to this file instead.

  * | ``--[no-]provides``
      ``bool``
    |
      List only targets that provide an artifact, displaying the columns specified by --provides-columns.

  * | ``--provides-columns``
      ``str``
      (Default: ``address,artifact_id``)
    |
      Display these columns when --provides is specified. Available columns are: address, artifact_id, repo_name, repo_url, push_db_basedir

  * | ``--[no-]documented``
      ``bool``
    |
      Print only targets that are documented with a description.




**Other command-line options:**

  `Common`_



.. _gref_goal_markdown:

markdown
-----------------------------------------------------------------------------

Generate html from markdown docs.


.. _gref_cli_markdown:

*
  **markdown**
  Implemented by ``pants.backend.core.tasks.markdown_to_html.MarkdownToHtml``



  * | ``--code-style``
      ``str``
      (Default: ``friendly``)
    |
      Use this stylesheet for code highlights.

  * | ``--[no-]open``
      ``bool``
    |
      Open the generated documents in a browser.

  * | ``--[no-]fragment``
      ``bool``
    |
      Generate a fragment of html to embed in a page.

  * | ``--extension``
      ``str``
      (Default: ``[u'.md', u'.markdown']``)
      (Default: ``[u'.md', u'.markdown']``)
    |
      Process files with these extensions (as well as the standard extensions).




**Other command-line options:**

  `Common`_



.. _gref_goal_minimize:

minimize
-----------------------------------------------------------------------------

Print the minimal cover of the given targets.


.. _gref_cli_minimize:

*
  **minimize**
  Implemented by ``pants.backend.core.tasks.minimal_cover.MinimalCover``



  * | ``--sep``
      ``str``
      (Default: ``\n``)
    |
      String to use to separate results.

  * | ``--output-file``
      ``str``
    |
      Write the console output to this file instead.




**Other command-line options:**

  `Common`_



.. _gref_goal_ng-killall:

ng-killall
-----------------------------------------------------------------------------

Kill running nailgun servers.


.. _gref_cli_ngkillall:

*
  **ng-killall**
  Implemented by ``pants.backend.jvm.tasks.nailgun_task.NailgunKillall``



  * | ``--[no-]everywhere``
      ``bool``
    |
      Kill all nailguns servers launched by pants for all workspaces on the system.




**Other command-line options:**

  `Common`_



.. _gref_goal_path:

path
-----------------------------------------------------------------------------

Find a dependency path from one target to another.


.. _gref_cli_path:

*
  **path**
  Implemented by ``pants.backend.core.tasks.paths.Path``



  * | ``--sep``
      ``str``
      (Default: ``\n``)
    |
      String to use to separate results.

  * | ``--output-file``
      ``str``
    |
      Write the console output to this file instead.




**Other command-line options:**

  `Common`_



.. _gref_goal_pathdeps:

pathdeps
-----------------------------------------------------------------------------

Print out all paths containing BUILD files the target depends on.


.. _gref_cli_pathdeps:

*
  **pathdeps**
  Implemented by ``pants.backend.core.tasks.pathdeps.PathDeps``



  * | ``--sep``
      ``str``
      (Default: ``\n``)
    |
      String to use to separate results.

  * | ``--output-file``
      ``str``
    |
      Write the console output to this file instead.




**Other command-line options:**

  `Common`_



.. _gref_goal_paths:

paths
-----------------------------------------------------------------------------

Find all dependency paths from one target to another.


.. _gref_cli_paths:

*
  **paths**
  Implemented by ``pants.backend.core.tasks.paths.Paths``



  * | ``--sep``
      ``str``
      (Default: ``\n``)
    |
      String to use to separate results.

  * | ``--output-file``
      ``str``
    |
      Write the console output to this file instead.




**Other command-line options:**

  `Common`_



.. _gref_goal_provides:

provides
-----------------------------------------------------------------------------

Print the symbols provided by the given targets.


.. _gref_cli_provides:

*
  **provides**
  Implemented by ``pants.backend.jvm.tasks.provides.Provides``



  * | ``--[no-]transitive``
      ``bool``
    |
      Shows the symbols provided not just by the specified targets but by all their transitive dependencies.

  * | ``--[no-]also-write-to-stdout``
      ``bool``
    |
      Also write the provides information to stdout.




**Other command-line options:**

  `Common`_



.. _gref_goal_publish:

publish
-----------------------------------------------------------------------------

Publish artifacts.


.. _gref_cli_publish:

*
  **publish**
  Implemented by ``pants.backend.jvm.tasks.jar_publish.JarPublish``



  * | ``--[no-]dryrun``
      ``bool``
      (Default: ``True``)
    |
      Run through a push without actually pushing artifacts, editing publish dbs or otherwise writing data

  * | ``--[no-]commit``
      ``bool``
      (Default: ``True``)
    |
      Commit the push db. Turn off for local testing.

  * | ``--local``
      ``str``
    |
      Publish jars to a maven repository on the local filesystem at this path.

  * | ``--scm-push-attempts``
      ``int``
      (Default: ``5``)
    |
      Try pushing the pushdb to the SCM this many times before aborting.

  * | ``--[no-]local-snapshot``
      ``bool``
      (Default: ``True``)
    |
      If --local is specified, publishes jars with -SNAPSHOT revision suffixes.

  * | ``--named-snapshot``
      ``str``
    |
      Publish all artifacts with the given snapshot name, replacing their version. This is not Semantic Versioning compatible, but is easier to consume in cases where many artifacts must align.

  * | ``--[no-]transitive``
      ``bool``
      (Default: ``True``)
    |
      Publish the specified targets and all their internal dependencies transitively.

  * | ``--[no-]force``
      ``bool``
    |
      Force pushing jars even if there have been no changes since the last push.

  * | ``--override``
      ``str``
    |
      Specifies a published jar revision override in the form: ([org]#[name]|[target spec])=[new revision] For example, to specify 2 overrides: --override=com.foo.bar#baz=0.1.2  --override=src/java/com/foo/bar/qux=1.0.0

  * | ``--restart-at``
      ``str``
    |
      Restart a fail push at the given jar.  Jars can be identified by maven coordinate [org]#[name] or target. For example: --restart-at=com.twitter.common#quantity Or: --restart-at=src/java/com/twitter/common/base




**Other command-line options:**

  `Common`_



.. _gref_goal_repl:

repl
-----------------------------------------------------------------------------

Run a REPL.


.. _gref_cli_replpythonrepl:

*
  **repl.python-repl**
  Implemented by ``pants.backend.python.tasks.python_repl.PythonRepl``



  * | ``--timeout``
      ``int``
    |
      Number of seconds to wait for http connections.

  * | ``--[no-]ipython``
      ``bool``
    |
      Run an IPython REPL instead of the standard python one.



.. _gref_cli_replscala:

*
  **repl.scala**
  Implemented by ``pants.backend.jvm.tasks.scala_repl.ScalaRepl``



  * | ``--jvm-options``
      ``str``
    |
      Run the jvm with these extra jvm options.

  * | ``--args``
      ``str``
    |
      Run the jvm with these extra program args.

  * | ``--[no-]debug``
      ``bool``
    |
      Run the jvm under a debugger.

  * | ``--confs``
      ``str``
      (Default: ``[u'default']``)
    |
      Use only these Ivy configurations of external deps.




**Other command-line options:**

  `Common`_



.. _gref_goal_repl-dirty:

repl-dirty
-----------------------------------------------------------------------------

Run a REPL, skipping compilation.


.. _gref_cli_repldirtyscaladirty:

*
  **repl-dirty.scala-dirty**
  Implemented by ``pants.backend.jvm.tasks.scala_repl.ScalaRepl``



  * | ``--jvm-options``
      ``str``
    |
      Run the jvm with these extra jvm options.

  * | ``--args``
      ``str``
    |
      Run the jvm with these extra program args.

  * | ``--[no-]debug``
      ``bool``
    |
      Run the jvm under a debugger.

  * | ``--confs``
      ``str``
      (Default: ``[u'default']``)
    |
      Use only these Ivy configurations of external deps.




**Other command-line options:**

  `Common`_



.. _gref_goal_resolve:

resolve
-----------------------------------------------------------------------------

Resolve dependencies and produce dependency reports.


.. _gref_cli_resolveivy:

*
  **resolve.ivy**
  Implemented by ``pants.backend.jvm.tasks.ivy_resolve.IvyResolve``



  * | ``--override``
      ``str``
    |
      Specifies a jar dependency override in the form: [org]#[name]=(revision|url) Multiple overrides can be specified using repeated invocations of this flag. For example, to specify 2 overrides: --override=com.foo#bar=0.1.2 --override=com.baz#spam=file:///tmp/spam.jar

  * | ``--[no-]report``
      ``bool``
    |
      Generate an ivy resolve html report

  * | ``--[no-]open``
      ``bool``
    |
      Attempt to open the generated ivy resolve report in a browser (implies --report)

  * | ``--outdir``
      ``str``
    |
      Emit ivy report outputs in to this directory.

  * | ``--args``
      ``str``
    |
      Pass these extra args to ivy.

  * | ``--mutable-pattern``
      ``str``
    |
      If specified, all artifact revisions matching this pattern will be treated as mutable unless a matching artifact explicitly marks mutable as False.




**Other command-line options:**

  `Common`_



.. _gref_goal_resources:

resources
-----------------------------------------------------------------------------



.. _gref_cli_resourcesprepare:

*
  **resources.prepare**
  Implemented by ``pants.backend.core.tasks.prepare_resources.PrepareResources``






**Other command-line options:**

  `Common`_



.. _gref_goal_roots:

roots
-----------------------------------------------------------------------------

Print the workspace's source roots and associated target types.


.. _gref_cli_roots:

*
  **roots**
  Implemented by ``pants.backend.core.tasks.roots.ListRoots``



  * | ``--sep``
      ``str``
      (Default: ``\n``)
    |
      String to use to separate results.

  * | ``--output-file``
      ``str``
    |
      Write the console output to this file instead.




**Other command-line options:**

  `Common`_



.. _gref_goal_run:

run
-----------------------------------------------------------------------------

Run a binary target.


.. _gref_cli_runpythonrun:

*
  **run.python-run**
  Implemented by ``pants.backend.python.tasks.python_run.PythonRun``



  * | ``--timeout``
      ``int``
    |
      Number of seconds to wait for http connections.



.. _gref_cli_runjvm:

*
  **run.jvm**
  Implemented by ``pants.backend.jvm.tasks.jvm_run.JvmRun``



  * | ``--jvm-options``
      ``str``
    |
      Run the jvm with these extra jvm options.

  * | ``--args``
      ``str``
    |
      Run the jvm with these extra program args.

  * | ``--[no-]debug``
      ``bool``
    |
      Run the jvm under a debugger.

  * | ``--confs``
      ``str``
      (Default: ``[u'default']``)
    |
      Use only these Ivy configurations of external deps.

  * | ``--only-write-cmd-line``
      ``str``
    |
      Instead of running, just write the cmd line to this file.




**Other command-line options:**

  `Common`_



.. _gref_goal_run-dirty:

run-dirty
-----------------------------------------------------------------------------

Run a binary target, skipping compilation.


.. _gref_cli_rundirtyjvmdirty:

*
  **run-dirty.jvm-dirty**
  Implemented by ``pants.backend.jvm.tasks.jvm_run.JvmRun``



  * | ``--jvm-options``
      ``str``
    |
      Run the jvm with these extra jvm options.

  * | ``--args``
      ``str``
    |
      Run the jvm with these extra program args.

  * | ``--[no-]debug``
      ``bool``
    |
      Run the jvm under a debugger.

  * | ``--confs``
      ``str``
      (Default: ``[u'default']``)
    |
      Use only these Ivy configurations of external deps.

  * | ``--only-write-cmd-line``
      ``str``
    |
      Instead of running, just write the cmd line to this file.




**Other command-line options:**

  `Common`_



.. _gref_goal_server:

server
-----------------------------------------------------------------------------

Run the pants reporting server.


.. _gref_cli_server:

*
  **server**
  Implemented by ``pants.backend.core.tasks.reporting_server.RunServer``



  * | ``--port``
      ``int``
    |
      Serve on this port. Leave unset to choose a free port automatically (recommended if using pants concurrently in multiple workspaces on the same host).

  * | ``--allowed-clients``
      ``str``
      (Default: ``[u'127.0.0.1']``)
    |
      Only requests from these IPs may access this server. Useful for temporarily showing build results to a colleague. The special value ALL means any client may connect. Use with caution, as your source code is exposed to all allowed clients!

  * | ``--[no-]open``
      ``bool``
    |
      Attempt to open the server web ui in a browser.




**Other command-line options:**

  `Common`_



.. _gref_goal_sign:

sign
-----------------------------------------------------------------------------



.. _gref_cli_sign:

*
  **sign**
  Implemented by ``pants.backend.android.tasks.jarsigner_task.JarsignerTask``



  * | ``--build-type``
      ``str``
    |
      Specifies the build type and keystore used to sign the package.




**Other command-line options:**

  `Common`_



.. _gref_goal_sitegen:

sitegen
-----------------------------------------------------------------------------

Generate static web site.


.. _gref_cli_sitegen:

*
  **sitegen**
  Implemented by ``internal_backend.sitegen.tasks.sitegen.SiteGen``



  * | ``--config-path``
      ``str``
    |
      Path to .json file describing site structure




**Other command-line options:**

  `Common`_



.. _gref_goal_sort:

sort
-----------------------------------------------------------------------------

Topologically sort the targets.


.. _gref_cli_sort:

*
  **sort**
  Implemented by ``pants.backend.core.tasks.sorttargets.SortTargets``



  * | ``--sep``
      ``str``
      (Default: ``\n``)
    |
      String to use to separate results.

  * | ``--output-file``
      ``str``
    |
      Write the console output to this file instead.

  * | ``--[no-]reverse``
      ``bool``
    |
      Sort least-dependent to most-dependent.




**Other command-line options:**

  `Common`_



.. _gref_goal_targets:

targets
-----------------------------------------------------------------------------

List target types and BUILD file symbols (python_tests, jar, etc).


.. _gref_cli_targets:

*
  **targets**
  Implemented by ``pants.backend.core.tasks.targets_help.TargetsHelp``



  * | ``--sep``
      ``str``
      (Default: ``\n``)
    |
      String to use to separate results.

  * | ``--output-file``
      ``str``
    |
      Write the console output to this file instead.

  * | ``--details``
      ``str``
    |
      Display details about the specific target type or BUILD symbol.




**Other command-line options:**

  `Common`_



.. _gref_goal_test:

test
-----------------------------------------------------------------------------

Test compiled code.


.. _gref_cli_testrunprepcommand:

*
  **test.run_prep_command**
  Implemented by ``pants.backend.core.tasks.run_prep_command.RunPrepCommand``





.. _gref_cli_testpytest:

*
  **test.pytest**
  Implemented by ``pants.backend.python.tasks.pytest_run.PytestRun``



  * | ``--timeout``
      ``int``
    |
      Number of seconds to wait for http connections.

  * | ``--[no-]fast``
      ``bool``
      (Default: ``True``)
    |
      Run all tests in a single chroot. If turned off, each test target will create a new chroot, which will be much slower.

  * | ``--options``
      ``str``
    |
      Pass these options to pytest.



.. _gref_cli_testjunit:

*
  **test.junit**
  Implemented by ``pants.backend.jvm.tasks.junit_run.JUnitRun``



  * | ``--jvm-options``
      ``str``
    |
      Run the jvm with these extra jvm options.

  * | ``--args``
      ``str``
    |
      Run the jvm with these extra program args.

  * | ``--[no-]debug``
      ``bool``
    |
      Run the jvm under a debugger.

  * | ``--confs``
      ``str``
      (Default: ``[u'default']``)
    |
      Use only these Ivy configurations of external deps.

  * | ``--coverage-patterns``
      ``str``
    |
      Restrict coverage measurement. Values are class name prefixes in dotted form with ? and * wildcards. If preceded with a - the pattern is excluded. For example, to include all code in com.pants.raven except claws and the eye you would use: %(flag)s=com.pants.raven.* %(flag)s=-com.pants.raven.claw %(flag)s=-com.pants.raven.Eye.

  * | ``--[no-]coverage-console``
      ``bool``
      (Default: ``True``)
    |
      Output a simple coverage report to the console.

  * | ``--[no-]coverage-xml``
      ``bool``
    |
      Output an XML coverage report.

  * | ``--[no-]coverage-html``
      ``bool``
    |
      Output an HTML coverage report.

  * | ``--[no-]coverage-html-open``
      ``bool``
    |
      Open the generated HTML coverage report in a browser. Implies --coverage-html.

  * | ``--[no-]skip``
      ``bool``
    |
      Skip running junit.

  * | ``--[no-]fail-fast``
      ``bool``
    |
      Fail fast on the first test failure in a suite.

  * | ``--batch-size``
      ``int``
      (Default: ``9223372036854775807``)
    |
      Run at most this many tests in a single test process.

  * | ``--test``
      ``str``
    |
      Force running of just these tests.  Tests can be specified using any of: [classname], [classname]#[methodname], [filename] or [filename]#[methodname]

  * | ``--[no-]xml-report``
      ``bool``
    |
      Output an XML report for the test run.

  * | ``--[no-]per-test-timer``
      ``bool``
    |
      Show progress and timer for each test.

  * | ``--[no-]default-parallel``
      ``bool``
    |
      Run classes without @TestParallel or @TestSerial annotations in parallel.

  * | ``--parallel-threads``
      ``int``
    |
      Number of threads to run tests in parallel. 0 for autoset.

  * | ``--test-shard``
      ``str``
    |
      Subset of tests to run, in the form M/N, 0 <= M < N. For example, 1/3 means run tests number 2, 5, 8, 11, ...

  * | ``--[no-]suppress-output``
      ``bool``
      (Default: ``True``)
    |
      Redirect test output to files in .pants.d/test/junit. Implied by --xml-report.

  * | ``--[no-]coverage``
      ``bool``
    |
      Collect code coverage data.

  * | ``--coverage-processor``
      ``str``
      (Default: ``emma``)
    |
      Which coverage subsystem to use.



.. _gref_cli_testspecs:

*
  **test.specs**
  Implemented by ``pants.backend.jvm.tasks.specs_run.SpecsRun``



  * | ``--jvm-options``
      ``str``
    |
      Run the jvm with these extra jvm options.

  * | ``--args``
      ``str``
    |
      Run the jvm with these extra program args.

  * | ``--[no-]debug``
      ``bool``
    |
      Run the jvm under a debugger.

  * | ``--confs``
      ``str``
      (Default: ``[u'default']``)
    |
      Use only these Ivy configurations of external deps.

  * | ``--[no-]skip``
      ``bool``
    |
      Skip running specs.

  * | ``--test``
      ``str``
    |
      Force running of just these specs.  Tests can be specified either by fully qualified classname or full file path.

  * | ``--[no-]color``
      ``bool``
      (Default: ``True``)
    |
      Emit test result with ANSI terminal color codes.




**Other command-line options:**

  `Common`_



.. _gref_goal_thrift-linter:

thrift-linter
-----------------------------------------------------------------------------

Check thrift files for non-recommended usage patterns.


.. _gref_cli_thriftlinter:

*
  **thrift-linter**
  Implemented by ``pants.backend.codegen.tasks.thrift_linter.ThriftLinter``



  * | ``--[no-]strict``
      ``bool``
    |
      Fail the goal if thrift linter errors are found.




**Other command-line options:**

  `Common`_




Common
-----------------------------------------------------------------------------

These command-line flags are available with all Pants goals.

  ``-h/--help``
  Show this help message.

  ``-t/--timeout``
  Number of seconds to wait for http connections.

  ``-x/--time``
  Times tasks and goals and outputs a report.

  ``-e/--explain``
  Explain the execution of goals.

  ``-k/--kill-nailguns``
  Kill nailguns before exiting

  ``-d/--logdir``
  Write logs to files under this directory.

  ``-l/--level``
  Set the logging level [debug, info, warn].

  ``-q/--quiet``
  Squelches all console output apart from errors.

  ``-i/--interpreter``
  Constrain what Python interpreters to use.  Uses Requirement format from pkg_resources, e.g. 'CPython&gt;=2.6,&lt;3' or 'PyPy'. By default, no constraints are used.  Multiple constraints may be added.  They will be ORed together.

  ``--no-colors``
  Do not colorize log messages.

  ``--no-lock``
  Don't attempt to grab the global lock. This lock prevents two concurrent pants instances from stomping on each others data, so only use this if you know what you're doing.

  ``--read-from-artifact-cache/--no-read-from-artifact-cache``
  Read build artifacts from cache, if available.

  ``--exclude-target-regexp``
  Regex pattern to exclude from the target list (useful in conjunction with ::). Multiple patterns may be specified by setting this flag multiple times.

  ``--write-to-artifact-cache/--no-write-to-artifact-cache``
  Write build artifacts to cache, if possible.

  ``--print-exception-stacktrace``
  Print to console the full exception stack trace if encountered.

  ``--fail-fast``
  When parsing specs, will stop on the first erronous BUILD file encountered. Otherwise, will parse all builds in a spec and then throw an Exception.

