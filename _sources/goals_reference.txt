***************
Goals Reference
***************

This page documents ``goals``, actions that can be taken on build targets.
A goal identifies some high-level goal that you wish to accomplish, such as
compiling your code.

A goal depends on other goals that must happen first; for example, Pants must
compile code before it can run tests.

Each goal is implemented by one or more Tasks. For example, the
``JavaCompile`` task compiles Java code, and its installed in the ``compile``
goal.


**Goals and Tasks summary**

  * :ref:`gref_goal_bench` - None
  * :ref:`gref_goal_binary` - Create a jvm binary jar.
  * :ref:`gref_goal_bootstrap` - Bootstrap tools needed for building.
  * :ref:`gref_goal_builddict` - None
  * :ref:`gref_goal_buildlint` - None
  * :ref:`gref_goal_bundle` - Create an application bundle from binary targets.
  * :ref:`gref_goal_changed` - Print the targets changed since some prior commit.
  * :ref:`gref_goal_check-exclusives` - Check for exclusivity violations.
  * :ref:`gref_goal_check_published_deps` - Find references to outdated artifacts.
  * :ref:`gref_goal_clean-all` - Clean all build output.
  * :ref:`gref_goal_clean-all-async` - [deprecated] Clean all build output in a background process.
  * :ref:`gref_goal_compile` - Scala source code style check.
  * :ref:`gref_goal_dependees` - Print the target's dependees.
  * :ref:`gref_goal_dependencies` - Print the target's dependencies.
  * :ref:`gref_goal_depmap` - Depict the target's dependencies.
  * :ref:`gref_goal_detect-duplicates` - Detect duplicate classes and resources on the classpath.
  * :ref:`gref_goal_dex` - None
  * :ref:`gref_goal_doc` - Create documentation.
  * :ref:`gref_goal_eclipse` - Create an Eclipse project from the given targets.
  * :ref:`gref_goal_ensime` - Create an Ensime project from the given targets.
  * :ref:`gref_goal_filedeps` - Print out the source and BUILD files the target depends on.
  * :ref:`gref_goal_filemap` - Outputs a mapping from source file to owning target.
  * :ref:`gref_goal_filter` - Filter the input targets based on various criteria.
  * :ref:`gref_goal_gen` - Generate code.
  * :ref:`gref_goal_goals` - List all documented goals.
  * :ref:`gref_goal_idea` - Create an IntelliJ IDEA project from the given targets.
  * :ref:`gref_goal_imports` - None
  * :ref:`gref_goal_invalidate` - Invalidate all targets.
  * :ref:`gref_goal_jar` - None
  * :ref:`gref_goal_killserver` - Kill the reporting server.
  * :ref:`gref_goal_list` - List available BUILD targets.
  * :ref:`gref_goal_markdown` - Generate html from markdown docs.
  * :ref:`gref_goal_minimize` - Print the minimal cover of the given targets.
  * :ref:`gref_goal_ng-killall` - Kill running nailgun servers.
  * :ref:`gref_goal_path` - Find a dependency path from one target to another.
  * :ref:`gref_goal_pathdeps` - Print out all paths containing BUILD files the target depends on.
  * :ref:`gref_goal_paths` - Find all dependency paths from one target to another.
  * :ref:`gref_goal_provides` - Print the symbols provided by the given targets.
  * :ref:`gref_goal_publish` - Publish artifacts.
  * :ref:`gref_goal_repl` - Run a REPL.
  * :ref:`gref_goal_repl-dirty` - Run a REPL, skipping compilation.
  * :ref:`gref_goal_resolve` - Resolve dependencies and produce dependency reports.
  * :ref:`gref_goal_resources` - None
  * :ref:`gref_goal_roots` - Print the workspace's source roots and associated target types.
  * :ref:`gref_goal_run` - Run a binary target.
  * :ref:`gref_goal_run-dirty` - Run a binary target, skipping compilation.
  * :ref:`gref_goal_server` - Run the pants reporting server.
  * :ref:`gref_goal_sign` - None
  * :ref:`gref_goal_sitegen` - Generate static web site.
  * :ref:`gref_goal_sort` - Topologically sort the targets.
  * :ref:`gref_goal_targets` - List target types and BUILD file symbols (python_tests, jar, etc).
  * :ref:`gref_goal_test` - Test compiled code.
  * :ref:`gref_goal_thrift-linter` - Check thrift files for non-recommended usage patterns.


.. _gref_goal_bench:

bench
-----------------------------------------------------------------------------



* Implemented by ``abc.BenchmarkRun_bench``






**Other command-line options:**

  `Common`_



.. _gref_goal_binary:

binary
-----------------------------------------------------------------------------

Create a jvm binary jar.


* Implemented by ``abc.PythonBinaryCreate_binary_python_binary_create``





* Implemented by ``abc.BinaryCreate_binary``





* Implemented by ``abc.DuplicateDetector_binary_dup``






**Other command-line options:**

  `Common`_



.. _gref_goal_bootstrap:

bootstrap
-----------------------------------------------------------------------------

Bootstrap tools needed for building.


* Implemented by ``abc.BootstrapJvmTools_bootstrap_bootstrap_jvm_tools``






**Other command-line options:**

  `Common`_



.. _gref_goal_builddict:

builddict
-----------------------------------------------------------------------------



* Implemented by ``abc.BuildBuildDictionary_builddict``






**Other command-line options:**

  `Common`_



.. _gref_goal_buildlint:

buildlint
-----------------------------------------------------------------------------



* Implemented by ``abc.BuildLint_buildlint``






**Other command-line options:**

  `Common`_



.. _gref_goal_bundle:

bundle
-----------------------------------------------------------------------------

Create an application bundle from binary targets.


* Implemented by ``abc.BundleCreate_bundle``





* Implemented by ``abc.DuplicateDetector_bundle_dup``





* Implemented by ``abc.AaptBuilder_bundle_apk``






**Other command-line options:**

  `Common`_



.. _gref_goal_changed:

changed
-----------------------------------------------------------------------------

Print the targets changed since some prior commit.


* Implemented by ``abc.WhatChanged_changed``






**Other command-line options:**

  `Common`_



.. _gref_goal_check-exclusives:

check-exclusives
-----------------------------------------------------------------------------

Check for exclusivity violations.


* Implemented by ``abc.CheckExclusives_check_exclusives``






**Other command-line options:**

  `Common`_



.. _gref_goal_check_published_deps:

check_published_deps
-----------------------------------------------------------------------------

Find references to outdated artifacts.


* Implemented by ``abc.CheckPublishedDeps_check_published_deps``






**Other command-line options:**

  `Common`_



.. _gref_goal_clean-all:

clean-all
-----------------------------------------------------------------------------

Clean all build output.


* Implemented by ``abc.NailgunKillall_clean_all_ng_killall``





* Implemented by ``abc.Invalidator_clean_all_invalidate``





* Implemented by ``abc.Cleaner_clean_all``






**Other command-line options:**

  `Common`_



.. _gref_goal_clean-all-async:

clean-all-async
-----------------------------------------------------------------------------

[deprecated] Clean all build output in a background process.


* Implemented by ``abc.NailgunKillall_clean_all_async_ng_killall``





* Implemented by ``abc.Invalidator_clean_all_async_invalidate``





* Implemented by ``abc.AsyncCleaner_clean_all_async``






**Other command-line options:**

  `Common`_



.. _gref_goal_compile:

compile
-----------------------------------------------------------------------------

Scala source code style check.


* Implemented by ``abc.SingletonGroupTask_compile_jvm``





* Implemented by ``abc.Scalastyle_compile_scalastyle``






**Other command-line options:**

  `Common`_



.. _gref_goal_dependees:

dependees
-----------------------------------------------------------------------------

Print the target's dependees.


* Implemented by ``abc.ReverseDepmap_dependees``






**Other command-line options:**

  `Common`_



.. _gref_goal_dependencies:

dependencies
-----------------------------------------------------------------------------

Print the target's dependencies.


* Implemented by ``abc.Dependencies_dependencies``






**Other command-line options:**

  `Common`_



.. _gref_goal_depmap:

depmap
-----------------------------------------------------------------------------

Depict the target's dependencies.


* Implemented by ``abc.Depmap_depmap``






**Other command-line options:**

  `Common`_



.. _gref_goal_detect-duplicates:

detect-duplicates
-----------------------------------------------------------------------------

Detect duplicate classes and resources on the classpath.


* Implemented by ``abc.DuplicateDetector_detect_duplicates``






**Other command-line options:**

  `Common`_



.. _gref_goal_dex:

dex
-----------------------------------------------------------------------------



* Implemented by ``abc.DxCompile_dex``






**Other command-line options:**

  `Common`_



.. _gref_goal_doc:

doc
-----------------------------------------------------------------------------

Create documentation.


* Implemented by ``abc.JavadocGen_doc_javadoc``





* Implemented by ``abc.ScaladocGen_doc_scaladoc``






**Other command-line options:**

  `Common`_



.. _gref_goal_eclipse:

eclipse
-----------------------------------------------------------------------------

Create an Eclipse project from the given targets.


* Implemented by ``abc.EclipseGen_eclipse``






**Other command-line options:**

  `Common`_



.. _gref_goal_ensime:

ensime
-----------------------------------------------------------------------------

Create an Ensime project from the given targets.


* Implemented by ``abc.EnsimeGen_ensime``






**Other command-line options:**

  `Common`_



.. _gref_goal_filedeps:

filedeps
-----------------------------------------------------------------------------

Print out the source and BUILD files the target depends on.


* Implemented by ``abc.FileDeps_filedeps``






**Other command-line options:**

  `Common`_



.. _gref_goal_filemap:

filemap
-----------------------------------------------------------------------------

Outputs a mapping from source file to owning target.


* Implemented by ``abc.Filemap_filemap``






**Other command-line options:**

  `Common`_



.. _gref_goal_filter:

filter
-----------------------------------------------------------------------------

Filter the input targets based on various criteria.


* Implemented by ``abc.Filter_filter``






**Other command-line options:**

  `Common`_



.. _gref_goal_gen:

gen
-----------------------------------------------------------------------------

Generate code.


* Implemented by ``abc.ApacheThriftGen_gen_thrift``





* Implemented by ``abc.ScroogeGen_gen_scrooge``





* Implemented by ``abc.ProtobufGen_gen_protoc``





* Implemented by ``abc.AntlrGen_gen_antlr``





* Implemented by ``abc.RagelGen_gen_ragel``





* Implemented by ``abc.JaxbGen_gen_jaxb``





* Implemented by ``abc.AaptGen_gen_aapt``






**Other command-line options:**

  `Common`_



.. _gref_goal_goals:

goals
-----------------------------------------------------------------------------

List all documented goals.


* Implemented by ``abc.ListGoals_goals``






**Other command-line options:**

  `Common`_



.. _gref_goal_idea:

idea
-----------------------------------------------------------------------------

Create an IntelliJ IDEA project from the given targets.


* Implemented by ``abc.IdeaGen_idea``






**Other command-line options:**

  `Common`_



.. _gref_goal_imports:

imports
-----------------------------------------------------------------------------



* Implemented by ``abc.IvyImports_imports_ivy_imports``






**Other command-line options:**

  `Common`_



.. _gref_goal_invalidate:

invalidate
-----------------------------------------------------------------------------

Invalidate all targets.


* Implemented by ``abc.NailgunKillall_invalidate_ng_killall``





* Implemented by ``abc.Invalidator_invalidate``






**Other command-line options:**

  `Common`_



.. _gref_goal_jar:

jar
-----------------------------------------------------------------------------



* Implemented by ``abc.JarCreate_jar``






**Other command-line options:**

  `Common`_



.. _gref_goal_killserver:

killserver
-----------------------------------------------------------------------------

Kill the reporting server.


* Implemented by ``abc.KillServer_killserver``






**Other command-line options:**

  `Common`_



.. _gref_goal_list:

list
-----------------------------------------------------------------------------

List available BUILD targets.


* Implemented by ``abc.ListTargets_list``






**Other command-line options:**

  `Common`_



.. _gref_goal_markdown:

markdown
-----------------------------------------------------------------------------

Generate html from markdown docs.


* Implemented by ``abc.MarkdownToHtml_markdown``






**Other command-line options:**

  `Common`_



.. _gref_goal_minimize:

minimize
-----------------------------------------------------------------------------

Print the minimal cover of the given targets.


* Implemented by ``abc.MinimalCover_minimize``






**Other command-line options:**

  `Common`_



.. _gref_goal_ng-killall:

ng-killall
-----------------------------------------------------------------------------

Kill running nailgun servers.


* Implemented by ``abc.NailgunKillall_ng_killall``






**Other command-line options:**

  `Common`_



.. _gref_goal_path:

path
-----------------------------------------------------------------------------

Find a dependency path from one target to another.


* Implemented by ``abc.Path_path``






**Other command-line options:**

  `Common`_



.. _gref_goal_pathdeps:

pathdeps
-----------------------------------------------------------------------------

Print out all paths containing BUILD files the target depends on.


* Implemented by ``abc.PathDeps_pathdeps``






**Other command-line options:**

  `Common`_



.. _gref_goal_paths:

paths
-----------------------------------------------------------------------------

Find all dependency paths from one target to another.


* Implemented by ``abc.Paths_paths``






**Other command-line options:**

  `Common`_



.. _gref_goal_provides:

provides
-----------------------------------------------------------------------------

Print the symbols provided by the given targets.


* Implemented by ``abc.Provides_provides``






**Other command-line options:**

  `Common`_



.. _gref_goal_publish:

publish
-----------------------------------------------------------------------------

Publish artifacts.


* Implemented by ``abc.JarPublish_publish``






**Other command-line options:**

  `Common`_



.. _gref_goal_repl:

repl
-----------------------------------------------------------------------------

Run a REPL.


* Implemented by ``abc.PythonRepl_repl_python_repl``





* Implemented by ``abc.ScalaRepl_repl_scala``






**Other command-line options:**

  `Common`_



.. _gref_goal_repl-dirty:

repl-dirty
-----------------------------------------------------------------------------

Run a REPL, skipping compilation.


* Implemented by ``abc.ScalaRepl_repl_dirty_scala_dirty``






**Other command-line options:**

  `Common`_



.. _gref_goal_resolve:

resolve
-----------------------------------------------------------------------------

Resolve dependencies and produce dependency reports.


* Implemented by ``abc.IvyResolve_resolve_ivy``






**Other command-line options:**

  `Common`_



.. _gref_goal_resources:

resources
-----------------------------------------------------------------------------



* Implemented by ``abc.PrepareResources_resources_prepare``






**Other command-line options:**

  `Common`_



.. _gref_goal_roots:

roots
-----------------------------------------------------------------------------

Print the workspace's source roots and associated target types.


* Implemented by ``abc.ListRoots_roots``






**Other command-line options:**

  `Common`_



.. _gref_goal_run:

run
-----------------------------------------------------------------------------

Run a binary target.


* Implemented by ``abc.PythonRun_run_python_run``





* Implemented by ``abc.JvmRun_run_jvm``






**Other command-line options:**

  `Common`_



.. _gref_goal_run-dirty:

run-dirty
-----------------------------------------------------------------------------

Run a binary target, skipping compilation.


* Implemented by ``abc.JvmRun_run_dirty_jvm_dirty``






**Other command-line options:**

  `Common`_



.. _gref_goal_server:

server
-----------------------------------------------------------------------------

Run the pants reporting server.


* Implemented by ``abc.RunServer_server``






**Other command-line options:**

  `Common`_



.. _gref_goal_sign:

sign
-----------------------------------------------------------------------------



* Implemented by ``abc.JarsignerTask_sign``






**Other command-line options:**

  `Common`_



.. _gref_goal_sitegen:

sitegen
-----------------------------------------------------------------------------

Generate static web site.


* Implemented by ``abc.SiteGen_sitegen``






**Other command-line options:**

  `Common`_



.. _gref_goal_sort:

sort
-----------------------------------------------------------------------------

Topologically sort the targets.


* Implemented by ``abc.SortTargets_sort``






**Other command-line options:**

  `Common`_



.. _gref_goal_targets:

targets
-----------------------------------------------------------------------------

List target types and BUILD file symbols (python_tests, jar, etc).


* Implemented by ``abc.TargetsHelp_targets``






**Other command-line options:**

  `Common`_



.. _gref_goal_test:

test
-----------------------------------------------------------------------------

Test compiled code.


* Implemented by ``abc.RunPrepCommand_test_run_prep_command``





* Implemented by ``abc.PytestRun_test_pytest``





* Implemented by ``abc.JUnitRun_test_junit``





* Implemented by ``abc.SpecsRun_test_specs``






**Other command-line options:**

  `Common`_



.. _gref_goal_thrift-linter:

thrift-linter
-----------------------------------------------------------------------------

Check thrift files for non-recommended usage patterns.


* Implemented by ``abc.ThriftLinter_thrift_linter``






**Other command-line options:**

  `Common`_




Common
-----------------------------------------------------------------------------

These command-line flags are available with all Pants goals.

  ``-h/--help``
  Show this help message.

  ``-t/--timeout``
  Number of seconds to wait for http connections.

  ``-x/--time``
  Times tasks and goals and outputs a report.

  ``-e/--explain``
  Explain the execution of goals.

  ``-k/--kill-nailguns``
  Kill nailguns before exiting

  ``-d/--logdir``
  Write logs to files under this directory.

  ``-l/--level``
  Set the logging level [debug, info, warn].

  ``-q/--quiet``
  Squelches all console output apart from errors.

  ``-i/--interpreter``
  Constrain what Python interpreters to use.  Uses Requirement format from pkg_resources, e.g. 'CPython&gt;=2.6,&lt;3' or 'PyPy'. By default, no constraints are used.  Multiple constraints may be added.  They will be ORed together.

  ``--no-colors``
  Do not colorize log messages.

  ``--no-lock``
  Don't attempt to grab the global lock. This lock prevents two concurrent pants instances from stomping on each others data, so only use this if you know what you're doing.

  ``--read-from-artifact-cache/--no-read-from-artifact-cache``
  Read build artifacts from cache, if available.

  ``--exclude-target-regexp``
  Regex pattern to exclude from the target list (useful in conjunction with ::). Multiple patterns may be specified by setting this flag multiple times.

  ``--write-to-artifact-cache/--no-write-to-artifact-cache``
  Write build artifacts to cache, if possible.

  ``--print-exception-stacktrace``
  Print to console the full exception stack trace if encountered.

  ``--fail-fast``
  When parsing specs, will stop on the first erronous BUILD file encountered. Otherwise, will parse all builds in a spec and then throw an Exception.

