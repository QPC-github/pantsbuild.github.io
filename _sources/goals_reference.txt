***************
Goals Reference
***************

This page documents ``goals``, actions that can be taken on build targets.
A goal identifies some high-level goal that you wish to accomplish, such as
compiling your code.

A goal depends on other goals that must happen first; for example, Pants must
compile code before it can run tests.

Each goal is implemented by one or more Tasks. For example, the
``JavaCompile`` task compiles java code, and its installed in the ``compile``
goal.


**Goals and Tasks summary**

  * :ref:`gref_phase_goals` - List all documented goals.
  * :ref:`gref_phase_targets` - List all target types.
  * :ref:`gref_phase_help` - Provide help for the specified goal.
  * :ref:`gref_phase_invalidate` - Invalidate all targets
  * :ref:`gref_phase_ng-killall` - Kill any running nailgun servers spawned by pants.
  * :ref:`gref_phase_clean-all` - Cleans all build output
  * :ref:`gref_phase_clean-all-async` - Cleans all build output in a background process
  * :ref:`gref_phase_server` - Run the pants reporting server.
  * :ref:`gref_phase_killserver` - Kill the pants reporting server.
  * :ref:`gref_phase_bootstrap` - Bootstrap tools needed for building
  * :ref:`gref_phase_gen` - Generate code.
  * :ref:`gref_phase_check-exclusives` - Check exclusives declarations to verify that dependencies are consistent.
  * :ref:`gref_phase_resolve` - Resolves jar dependencies and produces dependency reports.
  * :ref:`gref_phase_checkstyle` - Run checkstyle against java source code.
  * :ref:`gref_phase_compile` - Compile both generated and checked in code.
  * :ref:`gref_phase_resources` - None
  * :ref:`gref_phase_doc` - Create documentation.
  * :ref:`gref_phase_markdown` - Generate html from markdown docs.
  * :ref:`gref_phase_jar` - Create one or more jars.
  * :ref:`gref_phase_check_published_deps` - Find references to outdated artifacts published from this BUILD tree.
  * :ref:`gref_phase_test` - Test compiled code.
  * :ref:`gref_phase_bench` - None
  * :ref:`gref_phase_binary` - Create a jvm binary jar.
  * :ref:`gref_phase_bundle` - Create an application bundle from binary targets.
  * :ref:`gref_phase_detect-duplicates` - Detect duplicate classes and resources on the classpath.
  * :ref:`gref_phase_run` - Run a (currently JVM only) binary target.
  * :ref:`gref_phase_run-dirty` - Run a (currently JVM only) binary target, using only currently existing binaries, skipping compilation
  * :ref:`gref_phase_repl` - Run a (currently Scala only) REPL with the classpath set according to the targets.
  * :ref:`gref_phase_repl-dirty` - Run a (currently Scala only) REPL with the classpath set according to the targets, using the currently existing binaries, skipping compilation
  * :ref:`gref_phase_filedeps` - Print out a list of all files the target depends on
  * :ref:`gref_phase_pathdeps` - Print out a list of all paths containing build files the target depends on
  * :ref:`gref_phase_list` - List available BUILD targets.
  * :ref:`gref_phase_buildlint` - None
  * :ref:`gref_phase_builddict` - None
  * :ref:`gref_phase_idea` - Create an IntelliJ IDEA project from the given targets.
  * :ref:`gref_phase_eclipse` - Create an Eclipse project from the given targets.
  * :ref:`gref_phase_provides` - Emit the list of symbols provided by the given targets.
  * :ref:`gref_phase_setup` - Setup the target's build environment.
  * :ref:`gref_phase_path` - Find a dependency path from one target to another
  * :ref:`gref_phase_paths` - Find all dependency paths from one target to another
  * :ref:`gref_phase_dependees` - Print a reverse dependency mapping for the given targets
  * :ref:`gref_phase_depmap` - Generates either a textual dependency tree or a graphviz digraph dotfile for the dependency set of a target
  * :ref:`gref_phase_dependencies` - Extract textual infomation about the dependencies of a target
  * :ref:`gref_phase_filemap` - Outputs a mapping from source file to the target that owns the source file
  * :ref:`gref_phase_minimize` - Print the minimal cover of the given targets.
  * :ref:`gref_phase_filter` - Filter the input targets based on various criteria.
  * :ref:`gref_phase_sort` - Topologically sort the input targets.
  * :ref:`gref_phase_roots` - Prints the source roots and associated target types defined in the repo.


.. _gref_phase_goals:

goals
-----------------------------------------------------------------------------

List all documented goals.

**Installed tasks:**

* Implemented by class ``ListGoals``



.. _gref_phase_targets:

targets
-----------------------------------------------------------------------------

List all target types.

**Installed tasks:**

* Implemented by class ``TargetsHelp``

  Provides online help for installed targets.

  This task provides online help modes for installed targets. Without args,
  all installed targets are listed with their one-line description.
  An optional flag allows users to specify a target they want detailed
  help about.


.. _gref_phase_help:

help
-----------------------------------------------------------------------------

Provide help for the specified goal.

**Installed tasks:**

* Implemented by class ``Help``



.. _gref_phase_invalidate:

invalidate
-----------------------------------------------------------------------------

Invalidate all targets

**Installed tasks:**

* Implemented by class ``Invalidator``



.. _gref_phase_ng-killall:

ng-killall
-----------------------------------------------------------------------------

Kill any running nailgun servers spawned by pants.

**Installed tasks:**

* Implemented by class ``NailgunKillall``



.. _gref_phase_clean-all:

clean-all
-----------------------------------------------------------------------------

Cleans all build output

**Installed tasks:**

* Implemented by class ``Cleaner``



.. _gref_phase_clean-all-async:

clean-all-async
-----------------------------------------------------------------------------

Cleans all build output in a background process

**Installed tasks:**

* Implemented by class ``AsyncCleaner``



.. _gref_phase_server:

server
-----------------------------------------------------------------------------

Run the pants reporting server.

**Installed tasks:**

* Implemented by class ``RunServer``



.. _gref_phase_killserver:

killserver
-----------------------------------------------------------------------------

Kill the pants reporting server.

**Installed tasks:**

* Implemented by class ``KillServer``



.. _gref_phase_bootstrap:

bootstrap
-----------------------------------------------------------------------------

Bootstrap tools needed for building

**Installed tasks:**

* Implemented by class ``BootstrapJvmTools``



.. _gref_phase_gen:

gen
-----------------------------------------------------------------------------

Generate code.

**Installed tasks:**

* Implemented by class ``ThriftGen``


* Implemented by class ``ScroogeGen``


* Implemented by class ``ProtobufGen``


* Implemented by class ``AntlrGen``



.. _gref_phase_check-exclusives:

check-exclusives
-----------------------------------------------------------------------------

Check exclusives declarations to verify that dependencies are consistent.

**Installed tasks:**

* Implemented by class ``CheckExclusives``

  Computes transitive exclusive maps.

  This computes transitive exclusive tags for a dependency graph rooted
  with a set of build targets specified by a user. If this process produces
  any collisions where a single target contains multiple tag values for a single
  exclusives key, then it generates an error and the compilation will fail.

  The syntax of the exclusives attribute is: ::

     exclusives = {"id": "value", ...}

  For example, suppose that we had two java targets, jliba and jlibb. jliba uses
  slf4j, which includes in its jar package an implementation of log4j. jlibb uses
  log4j directly. But the version of log4j that's packaged inside of slf4j is
  different from the version used by jlibb. ::

     java_library(name='jliba',
       depedencies = ['slf4j-with-log4j-2.4'])
     java_library(name='jlibb',
       dependencies=['log4j-1.9'])
     java_binary(name='javabin', dependencies=[':jliba', ':jlibb'])

  In this case, the binary target 'javabin' depends on both slf4j with its
  packaged log4j version 2.4, and on log4j-1.9.
  Pants doesn't know that the slf4j and log4j jar_dependencies contain
  incompatible versions of the same library, and so it can't detect the error.

  With exclusives, the jar_library target for the joda libraries would declare
  exclusives tags: ::

     jar_library(name='slf4j-with-log4j-2.4', exclusives={'log4j': '2.4'})
     jar_library(name='joda-2.1', exclusives={'log4j': '1.9'})

  With the exclusives declared, pants can recognize that 'javabin' has conflicting
  dependencies, and can generate an appropriate error message.

  Data about exclusives is provided to other tasks via data build products.
  If the build data product 'exclusives_groups' is required, then an
  ExclusivesMapping object will be created.


.. _gref_phase_resolve:

resolve
-----------------------------------------------------------------------------

Resolves jar dependencies and produces dependency reports.

**Installed tasks:**

* Implemented by class ``IvyResolve``



.. _gref_phase_checkstyle:

checkstyle
-----------------------------------------------------------------------------

Run checkstyle against java source code.

**Installed tasks:**

* Implemented by class ``Checkstyle``



.. _gref_phase_compile:

compile
-----------------------------------------------------------------------------

Compile both generated and checked in code.

**Installed tasks:**

* Implemented by class ``ScalaCompile``


* Implemented by class ``AptCompile``


* Implemented by class ``JavaCompile``



.. _gref_phase_resources:

resources
-----------------------------------------------------------------------------


**Installed tasks:**

* Implemented by class ``PrepareResources``



.. _gref_phase_doc:

doc
-----------------------------------------------------------------------------

Create documentation.

**Installed tasks:**

* Implemented by class ``JavadocGen``


* Implemented by class ``ScaladocGen``



.. _gref_phase_markdown:

markdown
-----------------------------------------------------------------------------

Generate html from markdown docs.

**Installed tasks:**

* Implemented by class ``MarkdownToHtml``



.. _gref_phase_jar:

jar
-----------------------------------------------------------------------------

Create one or more jars.

**Installed tasks:**

* Implemented by class ``JavadocJarShim``


* Implemented by class ``ScaladocJarShim``


* Implemented by class ``JarCreateGoal``



.. _gref_phase_check_published_deps:

check_published_deps
-----------------------------------------------------------------------------

Find references to outdated artifacts published from this BUILD tree.

**Installed tasks:**

* Implemented by class ``CheckPublishedDeps``



.. _gref_phase_test:

test
-----------------------------------------------------------------------------

Test compiled code.

**Installed tasks:**

* Implemented by class ``JUnitRun``


* Implemented by class ``SpecsRun``



.. _gref_phase_bench:

bench
-----------------------------------------------------------------------------


**Installed tasks:**

* Implemented by class ``BenchmarkRun``



.. _gref_phase_binary:

binary
-----------------------------------------------------------------------------

Create a jvm binary jar.

**Installed tasks:**

* Implemented by class ``BinaryCreate``

  Creates a runnable monolithic binary deploy jar.

* Implemented by class ``DuplicateDetector``

  Detect classes and resources with the same qualified name on the classpath.


.. _gref_phase_bundle:

bundle
-----------------------------------------------------------------------------

Create an application bundle from binary targets.

**Installed tasks:**

* Implemented by class ``BundleCreate``



.. _gref_phase_detect-duplicates:

detect-duplicates
-----------------------------------------------------------------------------

Detect duplicate classes and resources on the classpath.

**Installed tasks:**

* Implemented by class ``DuplicateDetector``

  Detect classes and resources with the same qualified name on the classpath.


.. _gref_phase_run:

run
-----------------------------------------------------------------------------

Run a (currently JVM only) binary target.

**Installed tasks:**

* Implemented by class ``JvmRun``



.. _gref_phase_run-dirty:

run-dirty
-----------------------------------------------------------------------------

Run a (currently JVM only) binary target, using only currently existing binaries, skipping compilation

**Installed tasks:**

* Implemented by class ``JvmRun``



.. _gref_phase_repl:

repl
-----------------------------------------------------------------------------

Run a (currently Scala only) REPL with the classpath set according to the targets.

**Installed tasks:**

* Implemented by class ``ScalaRepl``



.. _gref_phase_repl-dirty:

repl-dirty
-----------------------------------------------------------------------------

Run a (currently Scala only) REPL with the classpath set according to the targets, using the currently existing binaries, skipping compilation

**Installed tasks:**

* Implemented by class ``ScalaRepl``



.. _gref_phase_filedeps:

filedeps
-----------------------------------------------------------------------------

Print out a list of all files the target depends on

**Installed tasks:**

* Implemented by class ``FileDeps``



.. _gref_phase_pathdeps:

pathdeps
-----------------------------------------------------------------------------

Print out a list of all paths containing build files the target depends on

**Installed tasks:**

* Implemented by class ``PathDeps``



.. _gref_phase_list:

list
-----------------------------------------------------------------------------

List available BUILD targets.

**Installed tasks:**

* Implemented by class ``ListTargets``

  Lists all BUILD targets in the system with no arguments, otherwise lists all
  the BUILD targets that reside in the the BUILD files hosting the specified
  targets.


.. _gref_phase_buildlint:

buildlint
-----------------------------------------------------------------------------


**Installed tasks:**

* Implemented by class ``BuildLint``



.. _gref_phase_builddict:

builddict
-----------------------------------------------------------------------------


**Installed tasks:**

* Implemented by class ``BuildBuildDictionary``

  Generate documentation for the Sphinx site.


.. _gref_phase_idea:

idea
-----------------------------------------------------------------------------

Create an IntelliJ IDEA project from the given targets.

**Installed tasks:**

* Implemented by class ``IdeaGen``



.. _gref_phase_eclipse:

eclipse
-----------------------------------------------------------------------------

Create an Eclipse project from the given targets.

**Installed tasks:**

* Implemented by class ``EclipseGen``



.. _gref_phase_provides:

provides
-----------------------------------------------------------------------------

Emit the list of symbols provided by the given targets.

**Installed tasks:**

* Implemented by class ``Provides``



.. _gref_phase_setup:

setup
-----------------------------------------------------------------------------

Setup the target's build environment.

**Installed tasks:**

* Implemented by class ``SetupPythonEnvironment``

  Establishes the python intepreter(s) for downstream Python tasks e.g. Resolve, Run, PytestRun.

    Populates the product namespace (for typename = 'python'):
      'intepreters': ordered list of PythonInterpreter objects


.. _gref_phase_path:

path
-----------------------------------------------------------------------------

Find a dependency path from one target to another

**Installed tasks:**

* Implemented by class ``Path``



.. _gref_phase_paths:

paths
-----------------------------------------------------------------------------

Find all dependency paths from one target to another

**Installed tasks:**

* Implemented by class ``Paths``



.. _gref_phase_dependees:

dependees
-----------------------------------------------------------------------------

Print a reverse dependency mapping for the given targets

**Installed tasks:**

* Implemented by class ``ReverseDepmap``

  Outputs all targets whose dependencies include at least one of the input targets.


.. _gref_phase_depmap:

depmap
-----------------------------------------------------------------------------

Generates either a textual dependency tree or a graphviz digraph dotfile for the dependency set of a target

**Installed tasks:**

* Implemented by class ``Depmap``

  Generates either a textual dependency tree or a graphviz digraph dot file for the dependency
  set of a target.


.. _gref_phase_dependencies:

dependencies
-----------------------------------------------------------------------------

Extract textual infomation about the dependencies of a target

**Installed tasks:**

* Implemented by class ``Dependencies``

  Generates a textual list (using the target format) for the dependency set of a target.


.. _gref_phase_filemap:

filemap
-----------------------------------------------------------------------------

Outputs a mapping from source file to the target that owns the source file

**Installed tasks:**

* Implemented by class ``Filemap``

  Outputs a mapping from source file to the target that owns the source file.


.. _gref_phase_minimize:

minimize
-----------------------------------------------------------------------------

Print the minimal cover of the given targets.

**Installed tasks:**

* Implemented by class ``MinimalCover``

  Outputs a minimal covering set of targets.

  For a given set of input targets, the output targets transitive dependency set will include all
  the input targets without gaps.


.. _gref_phase_filter:

filter
-----------------------------------------------------------------------------

Filter the input targets based on various criteria.

**Installed tasks:**

* Implemented by class ``Filter``

  Filters targets based on various criteria.


.. _gref_phase_sort:

sort
-----------------------------------------------------------------------------

Topologically sort the input targets.

**Installed tasks:**

* Implemented by class ``SortTargets``



.. _gref_phase_roots:

roots
-----------------------------------------------------------------------------

Prints the source roots and associated target types defined in the repo.

**Installed tasks:**

* Implemented by class ``ListRoots``

  List the registered source roots of the repo.

