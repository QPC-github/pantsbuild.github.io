***************
Goals Reference
***************

This page documents ``goals``, actions that can be taken on build targets.
A goal identifies some high-level goal that you wish to accomplish, such as
compiling your code.

A goal depends on other goals that must happen first; for example, Pants must
compile code before it can run tests.

Each goal is implemented by one or more Tasks. For example, the
``JavaCompile`` task compiles Java code, and its installed in the ``compile``
goal.


**Goals and Tasks summary**

  * :ref:`gref_goal_bench` - None
  * :ref:`gref_goal_binary` - Create a jvm binary jar.
  * :ref:`gref_goal_bootstrap` - Bootstrap tools needed for building.
  * :ref:`gref_goal_builddict` - None
  * :ref:`gref_goal_buildlint` - None
  * :ref:`gref_goal_bundle` - Create an application bundle from binary targets.
  * :ref:`gref_goal_changed` - Print the targets changed since some prior commit.
  * :ref:`gref_goal_check-exclusives` - Check for exclusivity violations.
  * :ref:`gref_goal_check_published_deps` - Find references to outdated artifacts.
  * :ref:`gref_goal_clean-all` - Clean all build output.
  * :ref:`gref_goal_clean-all-async` - Clean all build output in a background process.
  * :ref:`gref_goal_compile` - Scala source code style check.
  * :ref:`gref_goal_dependees` - Print the target's dependees.
  * :ref:`gref_goal_dependencies` - Print the target's dependencies.
  * :ref:`gref_goal_depmap` - Depict the target's dependencies.
  * :ref:`gref_goal_detect-duplicates` - Detect duplicate classes and resources on the classpath.
  * :ref:`gref_goal_dex` - None
  * :ref:`gref_goal_doc` - Create documentation.
  * :ref:`gref_goal_eclipse` - Create an Eclipse project from the given targets.
  * :ref:`gref_goal_ensime` - Create an Ensime project from the given targets.
  * :ref:`gref_goal_filedeps` - Print out the source and BUILD files the target depends on.
  * :ref:`gref_goal_filemap` - Outputs a mapping from source file to owning target.
  * :ref:`gref_goal_filter` - Filter the input targets based on various criteria.
  * :ref:`gref_goal_gen` - Generate code.
  * :ref:`gref_goal_goals` - List all documented goals.
  * :ref:`gref_goal_idea` - Create an IntelliJ IDEA project from the given targets.
  * :ref:`gref_goal_imports` - None
  * :ref:`gref_goal_invalidate` - Invalidate all targets.
  * :ref:`gref_goal_jar` - None
  * :ref:`gref_goal_killserver` - Kill the reporting server.
  * :ref:`gref_goal_list` - List available BUILD targets.
  * :ref:`gref_goal_markdown` - Generate html from markdown docs.
  * :ref:`gref_goal_minimize` - Print the minimal cover of the given targets.
  * :ref:`gref_goal_ng-killall` - Kill running nailgun servers.
  * :ref:`gref_goal_path` - Find a dependency path from one target to another.
  * :ref:`gref_goal_pathdeps` - Print out all paths containing BUILD files the target depends on.
  * :ref:`gref_goal_paths` - Find all dependency paths from one target to another.
  * :ref:`gref_goal_provides` - Print the symbols provided by the given targets.
  * :ref:`gref_goal_publish` - Publish artifacts.
  * :ref:`gref_goal_repl` - Run a REPL.
  * :ref:`gref_goal_repl-dirty` - Run a REPL, skipping compilation.
  * :ref:`gref_goal_resolve` - Resolve dependencies and produce dependency reports.
  * :ref:`gref_goal_resources` - None
  * :ref:`gref_goal_roots` - Print the workspace's source roots and associated target types.
  * :ref:`gref_goal_run` - Run a binary target.
  * :ref:`gref_goal_run-dirty` - Run a binary target, skipping compilation.
  * :ref:`gref_goal_server` - Run the pants reporting server.
  * :ref:`gref_goal_sign` - None
  * :ref:`gref_goal_sitegen` - Generate static web site.
  * :ref:`gref_goal_sort` - Topologically sort the targets.
  * :ref:`gref_goal_targets` - List target types and BUILD file symbols (python_tests, jar, etc).
  * :ref:`gref_goal_test` - Test compiled code.
  * :ref:`gref_goal_thrift-linter` - Check thrift files for non-recommended usage patterns.


.. _gref_goal_bench:

bench
-----------------------------------------------------------------------------



.. _gref_cli_bench:

*
  **bench**
  Implemented by ``abc.BenchmarkRun_bench``



  * | ``--bench-target``
      ``string``
    |
      Name of the benchmark class.

  * | ``--bench-memory/--no-bench-memory``
    |
      Enable memory profiling.

  * | ``--bench-debug/--no-bench-debug``
    |
      Enable caliper debug mode.

  * | ``--bench-caliper-args``
      ``string``
    |
      Allows the user to pass additional command line options to caliper. Can be used multiple times and arguments will be concatenated. Example use: --bench-caliper-args='-Dsize=10,20 -Dcomplex=true,false' --bench-caliper-args=-Dmem=1,2,3




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`
  :ref:`compile.scalastyle <gref_cli_compilescalastyle>`



.. _gref_goal_binary:

binary
-----------------------------------------------------------------------------

Create a jvm binary jar.


.. _gref_cli_binarypythonbinarycreate:

*
  **binary.python-binary-create**
  Implemented by ``abc.PythonBinaryCreate_binary.python-binary-create``



  * | ``--binary-python-binary-create-timeout``
      ``int``
    |
      Number of seconds to wait for http connections.



* Implemented by ``abc.BinaryCreate_binary``





.. _gref_cli_binarydup:

*
  **binary.dup**
  Implemented by ``abc.DuplicateDetector_binary.dup``



  * | ``--binary-dup-fail-fast/--no-binary-dup-fail-fast``
    |
      Fail fast if duplicate classes/resources are found.

  * | ``--binary-dup-excludes``
      ``string``
      (Default: ``dependencies,license,notice,.DS_Store,notice.txt,cmdline.arg.info.txt.1,license.txt``)
    |
      A comma separated list of case insensitive filenames (without directory) to exclude from duplicate check, defaults to:

  * | ``--binary-dup-max-dups``
      ``string``
      (Default: ``10``)
    |
      Maximum number of duplicate classes to display per artifactdefaults to:




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`
  :ref:`compile.scalastyle <gref_cli_compilescalastyle>`



.. _gref_goal_bootstrap:

bootstrap
-----------------------------------------------------------------------------

Bootstrap tools needed for building.


* Implemented by ``abc.BootstrapJvmTools_bootstrap.bootstrap-jvm-tools``






**Other command-line options:**

  `Common`_



.. _gref_goal_builddict:

builddict
-----------------------------------------------------------------------------



* Implemented by ``abc.BuildBuildDictionary_builddict``






**Other command-line options:**

  `Common`_



.. _gref_goal_buildlint:

buildlint
-----------------------------------------------------------------------------



.. _gref_cli_buildlint:

*
  **buildlint**
  Implemented by ``abc.BuildLint_buildlint``



  * | ``--buildlint-transitive/--no-buildlint-transitive``
    |
      apply lint rules transitively to all dependency buildfiles.

  * | ``--buildlint-include-intransitive-deps/--no-buildlint-include-intransitive-deps``
    |
      correct both simple missing dependencies and intransitive missing deps

  * | ``--buildlint-action``
      ``choice``
    |
      diff=print out diffs, rewrite=apply changes to BUILD files directly.




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`
  :ref:`compile.scalastyle <gref_cli_compilescalastyle>`



.. _gref_goal_bundle:

bundle
-----------------------------------------------------------------------------

Create an application bundle from binary targets.


.. _gref_cli_bundle:

*
  **bundle**
  Implemented by ``abc.BundleCreate_bundle``



  * | ``--bundle-deployjar/--no-bundle-deployjar``
    |
      Expand 3rdparty jars into loose classfiles in the bundle's root dir. If unset, the root will contain internal classfilesonly, and 3rdparty jars will go into the bundle's libs dir.

  * | ``--bundle-archive``
      ``choice``
    |
      Create an archive from the bundle. Choose from ['tar', 'tbz2', 'tgz', 'zip']

  * | ``--bundle-archive-prefix/--no-bundle-archive-prefix``
    |
      Used in conjunction with --bundle-archive this packs the archive with its basename as the path prefix.



.. _gref_cli_bundledup:

*
  **bundle.dup**
  Implemented by ``abc.DuplicateDetector_bundle.dup``



  * | ``--bundle-dup-fail-fast/--no-bundle-dup-fail-fast``
    |
      Fail fast if duplicate classes/resources are found.

  * | ``--bundle-dup-excludes``
      ``string``
      (Default: ``dependencies,license,notice,.DS_Store,notice.txt,cmdline.arg.info.txt.1,license.txt``)
    |
      A comma separated list of case insensitive filenames (without directory) to exclude from duplicate check, defaults to:

  * | ``--bundle-dup-max-dups``
      ``string``
      (Default: ``10``)
    |
      Maximum number of duplicate classes to display per artifactdefaults to:



.. _gref_cli_bundleapk:

*
  **bundle.apk**
  Implemented by ``abc.AaptBuilder_bundle.apk``



  * | ``--bundle-apk-sdk-path``
      ``string``
    |
      Specify a file location and force the Android SDK there to be used during Android tasks.

  * | ``--bundle-apk-target-sdk``
      ``string``
    |
      Specifies the target Android SDK used to compile resources. Overrides AndroidManifest.xml.

  * | ``--bundle-apk-build-tools-version``
      ``string``
    |
      Specifies the Android build-tools version used to compile resources.

  * | ``--bundle-apk-ignored-assets``
      ``string``
      (Default: ``!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir&gt;_*:!CVS:!thumbs.db:!picasa.ini:!*~:BUILD*``)
    |
      Specifies regex patterns the aapt tools should ignore as it spiders down the resource_dir.




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`
  :ref:`compile.scalastyle <gref_cli_compilescalastyle>`
  :ref:`dex <gref_cli_dex>`



.. _gref_goal_changed:

changed
-----------------------------------------------------------------------------

Print the targets changed since some prior commit.


.. _gref_cli_changed:

*
  **changed**
  Implemented by ``abc.WhatChanged_changed``



  * | ``--changed-parent``
      ``string``
      (Default: ``HEAD``)
    |
      Identifies the parent tree-ish to calculate changes against.

  * | ``--changed-files/--no-changed-files``
    |
      Shows changed files instead of the targets that own them.




**Other command-line options:**

  `Common`_



.. _gref_goal_check-exclusives:

check-exclusives
-----------------------------------------------------------------------------

Check for exclusivity violations.


.. _gref_cli_checkexclusives:

*
  **check-exclusives**
  Implemented by ``abc.CheckExclusives_check-exclusives``



  * | ``--check-exclusives-error_on_collision/--no-check-exclusives-error_on_collision``
      (Default: ``True``)
    |
      Signal an error and abort the build if an exclusives collision is detected




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`



.. _gref_goal_check_published_deps:

check_published_deps
-----------------------------------------------------------------------------

Find references to outdated artifacts.


.. _gref_cli_checkpublisheddeps:

*
  **check_published_deps**
  Implemented by ``abc.CheckPublishedDeps_check_published_deps``



  * | ``--check_published_deps-print-uptodate/--no-check_published_deps-print-uptodate``
    |
      Also print up-to-date dependencies.




**Other command-line options:**

  `Common`_



.. _gref_goal_clean-all:

clean-all
-----------------------------------------------------------------------------

Clean all build output.


.. _gref_cli_cleanallngkillall:

*
  **clean-all.ng-killall**
  Implemented by ``abc.NailgunKillall_clean-all.ng-killall``



  * | ``--clean-all-ng-killall-everywhere``
    |
      Kill all nailguns servers launched by pants for all workspaces on the system.



* Implemented by ``abc.Invalidator_clean-all.invalidate``





* Implemented by ``abc.Cleaner_clean-all``






**Other command-line options:**

  `Common`_
  :ref:`ng-killall <gref_cli_ngkillall>`
  :ref:`invalidate.ng-killall <gref_cli_invalidatengkillall>`



.. _gref_goal_clean-all-async:

clean-all-async
-----------------------------------------------------------------------------

Clean all build output in a background process.


.. _gref_cli_cleanallasyncngkillall:

*
  **clean-all-async.ng-killall**
  Implemented by ``abc.NailgunKillall_clean-all-async.ng-killall``



  * | ``--clean-all-async-ng-killall-everywhere``
    |
      Kill all nailguns servers launched by pants for all workspaces on the system.



* Implemented by ``abc.Invalidator_clean-all-async.invalidate``





* Implemented by ``abc.AsyncCleaner_clean-all-async``






**Other command-line options:**

  `Common`_
  :ref:`ng-killall <gref_cli_ngkillall>`
  :ref:`invalidate.ng-killall <gref_cli_invalidatengkillall>`



.. _gref_goal_compile:

compile
-----------------------------------------------------------------------------

Scala source code style check.


* Implemented by ``abc.SingletonGroupTask_compile.jvm``





.. _gref_cli_compilescalastyle:

*
  **compile.scalastyle**
  Implemented by ``abc.Scalastyle_compile.scalastyle``



  * | ``--compile-scalastyle-skip/--no-compile-scalastyle-skip``
    |
      Skip scalastyle.




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`



.. _gref_goal_dependees:

dependees
-----------------------------------------------------------------------------

Print the target's dependees.


* Implemented by ``abc.ReverseDepmap_dependees``






**Other command-line options:**

  `Common`_



.. _gref_goal_dependencies:

dependencies
-----------------------------------------------------------------------------

Print the target's dependencies.


.. _gref_cli_dependencies:

*
  **dependencies**
  Implemented by ``abc.Dependencies_dependencies``



  * | ``--dependencies-internal-only``
    |
      Specifies that only internal dependencies should be included in the graph output (no external jars).

  * | ``--dependencies-external-only``
    |
      Specifies that only external dependencies should be included in the graph output (only external jars).




**Other command-line options:**

  `Common`_



.. _gref_goal_depmap:

depmap
-----------------------------------------------------------------------------

Depict the target's dependencies.


.. _gref_cli_depmap:

*
  **depmap**
  Implemented by ``abc.Depmap_depmap``



  * | ``--depmap-internal-only``
    |
      Specifies that only internal dependencies should be included in the graph output (no external jars).

  * | ``--depmap-external-only``
    |
      Specifies that only external dependencies should be included in the graph output (only external jars).

  * | ``--depmap-minimal``
    |
      For a textual dependency tree, only prints a dependency the 1st time it is encountered.  For graph output this does nothing.

  * | ``--depmap-separator``
      ``string``
      (Default: ``-``)
    |
      Specifies the separator to use between the org/name/rev components of a dependency's fully qualified name.

  * | ``--depmap-graph``
    |
      Specifies the internal dependency graph should be output in the dot digraph format

  * | ``--depmap-project-info``
    |
      Produces a json object with info about the target, including source roots, dependencies, and paths to libraries for their targets and dependencies.

  * | ``--depmap-project-info-formatted``
      (Default: ``True``)
    |
      Causes project-info output to be a single line of JSON




**Other command-line options:**

  `Common`_



.. _gref_goal_detect-duplicates:

detect-duplicates
-----------------------------------------------------------------------------

Detect duplicate classes and resources on the classpath.


.. _gref_cli_detectduplicates:

*
  **detect-duplicates**
  Implemented by ``abc.DuplicateDetector_detect-duplicates``



  * | ``--detect-duplicates-fail-fast/--no-detect-duplicates-fail-fast``
    |
      Fail fast if duplicate classes/resources are found.

  * | ``--detect-duplicates-excludes``
      ``string``
      (Default: ``dependencies,license,notice,.DS_Store,notice.txt,cmdline.arg.info.txt.1,license.txt``)
    |
      A comma separated list of case insensitive filenames (without directory) to exclude from duplicate check, defaults to:

  * | ``--detect-duplicates-max-dups``
      ``string``
      (Default: ``10``)
    |
      Maximum number of duplicate classes to display per artifactdefaults to:




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`
  :ref:`compile.scalastyle <gref_cli_compilescalastyle>`



.. _gref_goal_dex:

dex
-----------------------------------------------------------------------------



.. _gref_cli_dex:

*
  **dex**
  Implemented by ``abc.DxCompile_dex``



  * | ``--dex-sdk-path``
      ``string``
    |
      Specify a file location and force the Android SDK there to be used during Android tasks.

  * | ``--dex-build-tools-version``
      ``string``
    |
      Specifies the Android build-tools version used to create the dex file.

  * | ``--dex-VM-options``
      ``string``
    |
      Pass VM-specific options to the virtual machine that runs dx (e.g. Xmx1024m).




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`
  :ref:`compile.scalastyle <gref_cli_compilescalastyle>`



.. _gref_goal_doc:

doc
-----------------------------------------------------------------------------

Create documentation.


.. _gref_cli_docjavadoc:

*
  **doc.javadoc**
  Implemented by ``abc.JavadocGen_doc.javadoc``



  * | ``--doc-javadoc-include-codegen/--no-doc-javadoc-include-codegen``
    |
      Create javadoc for generated code.

  * | ``--doc-javadoc-transitive/--no-doc-javadoc-transitive``
      (Default: ``True``)
    |
      Create javadoc for the transitive closure of internal targets reachable from the roots specified on the command line.

  * | ``--doc-javadoc-combined/--no-doc-javadoc-combined``
    |
      Generate javadoc for all targets combined instead of each target individually.

  * | ``--doc-javadoc-open/--no-doc-javadoc-open``
    |
      Attempt to open the generated javadoc in a browser (implies --doc-javadoc-combined).

  * | ``--doc-javadoc-ignore-failure/--no-doc-javadoc-ignore-failure``
    |
      Specifies that javadoc errors should not cause build errors

  * | ``--doc-javadoc-skip/--no-doc-javadoc-skip``
    |
      Can be used to skip javadoc generation



.. _gref_cli_docscaladoc:

*
  **doc.scaladoc**
  Implemented by ``abc.ScaladocGen_doc.scaladoc``



  * | ``--doc-scaladoc-include-codegen/--no-doc-scaladoc-include-codegen``
    |
      Create scaladoc for generated code.

  * | ``--doc-scaladoc-transitive/--no-doc-scaladoc-transitive``
      (Default: ``True``)
    |
      Create scaladoc for the transitive closure of internal targets reachable from the roots specified on the command line.

  * | ``--doc-scaladoc-combined/--no-doc-scaladoc-combined``
    |
      Generate scaladoc for all targets combined instead of each target individually.

  * | ``--doc-scaladoc-open/--no-doc-scaladoc-open``
    |
      Attempt to open the generated scaladoc in a browser (implies --doc-scaladoc-combined).

  * | ``--doc-scaladoc-ignore-failure/--no-doc-scaladoc-ignore-failure``
    |
      Specifies that scaladoc errors should not cause build errors

  * | ``--doc-scaladoc-skip/--no-doc-scaladoc-skip``
    |
      Can be used to skip scaladoc generation




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`
  :ref:`compile.scalastyle <gref_cli_compilescalastyle>`



.. _gref_goal_eclipse:

eclipse
-----------------------------------------------------------------------------

Create an Eclipse project from the given targets.


.. _gref_cli_eclipse:

*
  **eclipse**
  Implemented by ``abc.EclipseGen_eclipse``



  * | ``--eclipse-project-name``
      ``string``
      (Default: ``project``)
    |
      Specifies the name to use for the generated project.

  * | ``--eclipse-project-dir``
      ``string``
    |
      Specifies the directory to output the generated project files to.

  * | ``--eclipse-project-cwd``
      ``string``
    |
      Specifies the directory the generated project should use as the cwd for processes it launches.  Note that specifying this trumps --eclipse-project-dir and not all project related files will be stored there.

  * | ``--eclipse-intransitive``
    |
      Limits the sources included in the generated project to just those owned by the targets specified on the command line

  * | ``--eclipse-python/--no-eclipse-python``
    |
      Adds python support to the generated project configuration.

  * | ``--eclipse-java/--no-eclipse-java``
      (Default: ``True``)
    |
      Includes java sources in the project; otherwise compiles them and adds them to the project classpath.

  * | ``--eclipse-java-language-level``
      ``int``
      (Default: ``7``)
    |
      Sets the java language and jdk used to compile the project's java sources.

  * | ``--eclipse-java-jdk-name``
      ``string``
    |
      Sets the jdk used to compile the project's java sources. If unset the default jdk name for the --eclipse-java-language-level is used.

  * | ``--eclipse-scala/--no-eclipse-scala``
      (Default: ``True``)
    |
      Includes scala sources in the project; otherwise compiles them and adds them to the project classpath.

  * | ``--eclipse-use-source-root/--no-eclipse-use-source-root``
    |
      Use source_root() settings to collapse sourcepaths in project and determine which paths are used for tests.  This is usually what you want if your repo uses a maven style directory layout.

  * | ``--eclipse-infer-test-from-siblings/--no-eclipse-infer-test-from-siblings``
      (Default: ``True``)
    |
      When determining if a path should be added to the IDE, check to see if any of its sibling source_root() entries define test targets.  This is usually what you want so that resource directories under test source roots are picked up as test paths.

  * | ``--eclipse-eclipse-version``
      ``choice``
      (Default: ``3.6``)
    |
      The Eclipse version the project configuration should be generated for; can be one of: [u'3.5', u'3.6', u'3.7']




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`
  :ref:`compile.scalastyle <gref_cli_compilescalastyle>`
  :ref:`jar <gref_cli_jar>`



.. _gref_goal_ensime:

ensime
-----------------------------------------------------------------------------

Create an Ensime project from the given targets.


.. _gref_cli_ensime:

*
  **ensime**
  Implemented by ``abc.EnsimeGen_ensime``



  * | ``--ensime-project-name``
      ``string``
      (Default: ``project``)
    |
      Specifies the name to use for the generated project.

  * | ``--ensime-project-dir``
      ``string``
    |
      Specifies the directory to output the generated project files to.

  * | ``--ensime-project-cwd``
      ``string``
    |
      Specifies the directory the generated project should use as the cwd for processes it launches.  Note that specifying this trumps --ensime-project-dir and not all project related files will be stored there.

  * | ``--ensime-intransitive``
    |
      Limits the sources included in the generated project to just those owned by the targets specified on the command line

  * | ``--ensime-python/--no-ensime-python``
    |
      Adds python support to the generated project configuration.

  * | ``--ensime-java/--no-ensime-java``
      (Default: ``True``)
    |
      Includes java sources in the project; otherwise compiles them and adds them to the project classpath.

  * | ``--ensime-java-language-level``
      ``int``
      (Default: ``7``)
    |
      Sets the java language and jdk used to compile the project's java sources.

  * | ``--ensime-java-jdk-name``
      ``string``
    |
      Sets the jdk used to compile the project's java sources. If unset the default jdk name for the --ensime-java-language-level is used.

  * | ``--ensime-scala/--no-ensime-scala``
      (Default: ``True``)
    |
      Includes scala sources in the project; otherwise compiles them and adds them to the project classpath.

  * | ``--ensime-use-source-root/--no-ensime-use-source-root``
    |
      Use source_root() settings to collapse sourcepaths in project and determine which paths are used for tests.  This is usually what you want if your repo uses a maven style directory layout.

  * | ``--ensime-infer-test-from-siblings/--no-ensime-infer-test-from-siblings``
      (Default: ``True``)
    |
      When determining if a path should be added to the IDE, check to see if any of its sibling source_root() entries define test targets.  This is usually what you want so that resource directories under test source roots are picked up as test paths.

  * | ``--ensime-scala-language-level``
      ``choice``
      (Default: ``2.10``)
    |
      Set the scala language level used for Ensime linting.

  * | ``--ensime-java-encoding``
      ``string``
      (Default: ``UTF-8``)
    |
      Sets the file encoding for java files in this project.




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`
  :ref:`compile.scalastyle <gref_cli_compilescalastyle>`
  :ref:`jar <gref_cli_jar>`



.. _gref_goal_filedeps:

filedeps
-----------------------------------------------------------------------------

Print out the source and BUILD files the target depends on.


* Implemented by ``abc.FileDeps_filedeps``






**Other command-line options:**

  `Common`_



.. _gref_goal_filemap:

filemap
-----------------------------------------------------------------------------

Outputs a mapping from source file to owning target.


* Implemented by ``abc.Filemap_filemap``






**Other command-line options:**

  `Common`_



.. _gref_goal_filter:

filter
-----------------------------------------------------------------------------

Filter the input targets based on various criteria.


.. _gref_cli_filter:

*
  **filter**
  Implemented by ``abc.Filter_filter``



  * | ``--filter-type``
      ``string``
    |
      Identifies target types to include (optional '+' prefix) or exclude ('-' prefix).  Multiple type inclusions or exclusions can be specified at once in a comma separated list or else by using multiple instances of this flag.

  * | ``--filter-target``
      ``string``
    |
      Identifies specific targets to include (optional '+' prefix) or exclude ('-' prefix).  Multiple target inclusions or exclusions can be specified at once in a comma separated list or else by using multiple instances of this flag.

  * | ``--filter-ancestor``
      ``string``
    |
      Identifies ancestor targets (containing targets) that make a select child (contained) targets to include (optional '+' prefix) or exclude ('-' prefix).  Multiple ancestor inclusions or exclusions can be specified at once in a comma separated list or else by using multiple instances of this flag.

  * | ``--filter-regex``
      ``string``
    |
      Identifies regexes of target addresses to include (optional '+' prefix) or exclude ('-' prefix).  Multiple target inclusions or exclusions can be specified at once in a comma separated list or else by using multiple instances of this flag.




**Other command-line options:**

  `Common`_



.. _gref_goal_gen:

gen
-----------------------------------------------------------------------------

Generate code.


.. _gref_cli_genthrift:

*
  **gen.thrift**
  Implemented by ``abc.ApacheThriftGen_gen.thrift``



  * | ``--gen-thrift-version``
      ``string``
    |
      Thrift compiler version.

  * | ``--gen-thrift-lang``
      ``choice``
    |
      Force generation of thrift code for these languages.



.. _gref_cli_genscrooge:

*
  **gen.scrooge**
  Implemented by ``abc.ScroogeGen_gen.scrooge``



  * | ``--gen-scrooge-quiet``
    |
      Suppress output, overrides verbose flag in pants.ini.



.. _gref_cli_genprotoc:

*
  **gen.protoc**
  Implemented by ``abc.ProtobufGen_gen.protoc``



  * | ``--gen-protoc-lang``
      ``choice``
    |
      Force generation of protobuf code for these languages.



* Implemented by ``abc.AntlrGen_gen.antlr``





* Implemented by ``abc.RagelGen_gen.ragel``





* Implemented by ``abc.JaxbGen_gen.jaxb``





.. _gref_cli_genaapt:

*
  **gen.aapt**
  Implemented by ``abc.AaptGen_gen.aapt``



  * | ``--gen-aapt-sdk-path``
      ``string``
    |
      Specify a file location and force the Android SDK there to be used during Android tasks.

  * | ``--gen-aapt-target-sdk``
      ``string``
    |
      Specifies the target Android SDK used to compile resources. Overrides AndroidManifest.xml.

  * | ``--gen-aapt-build-tools-version``
      ``string``
    |
      Specifies the Android build-tools version used to compile resources.

  * | ``--gen-aapt-ignored-assets``
      ``string``
      (Default: ``!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir&gt;_*:!CVS:!thumbs.db:!picasa.ini:!*~:BUILD*``)
    |
      Specifies regex patterns the aapt tools should ignore as it spiders down the resource_dir.




**Other command-line options:**

  `Common`_



.. _gref_goal_goals:

goals
-----------------------------------------------------------------------------

List all documented goals.


* Implemented by ``abc.ListGoals_goals``






**Other command-line options:**

  `Common`_



.. _gref_goal_idea:

idea
-----------------------------------------------------------------------------

Create an IntelliJ IDEA project from the given targets.


.. _gref_cli_idea:

*
  **idea**
  Implemented by ``abc.IdeaGen_idea``



  * | ``--idea-project-name``
      ``string``
      (Default: ``project``)
    |
      Specifies the name to use for the generated project.

  * | ``--idea-project-dir``
      ``string``
    |
      Specifies the directory to output the generated project files to.

  * | ``--idea-project-cwd``
      ``string``
    |
      Specifies the directory the generated project should use as the cwd for processes it launches.  Note that specifying this trumps --idea-project-dir and not all project related files will be stored there.

  * | ``--idea-intransitive``
    |
      Limits the sources included in the generated project to just those owned by the targets specified on the command line

  * | ``--idea-python/--no-idea-python``
    |
      Adds python support to the generated project configuration.

  * | ``--idea-java/--no-idea-java``
      (Default: ``True``)
    |
      Includes java sources in the project; otherwise compiles them and adds them to the project classpath.

  * | ``--idea-java-language-level``
      ``int``
      (Default: ``7``)
    |
      Sets the java language and jdk used to compile the project's java sources.

  * | ``--idea-java-jdk-name``
      ``string``
    |
      Sets the jdk used to compile the project's java sources. If unset the default jdk name for the --idea-java-language-level is used.

  * | ``--idea-scala/--no-idea-scala``
      (Default: ``True``)
    |
      Includes scala sources in the project; otherwise compiles them and adds them to the project classpath.

  * | ``--idea-use-source-root/--no-idea-use-source-root``
    |
      Use source_root() settings to collapse sourcepaths in project and determine which paths are used for tests.  This is usually what you want if your repo uses a maven style directory layout.

  * | ``--idea-infer-test-from-siblings/--no-idea-infer-test-from-siblings``
      (Default: ``True``)
    |
      When determining if a path should be added to the IDE, check to see if any of its sibling source_root() entries define test targets.  This is usually what you want so that resource directories under test source roots are picked up as test paths.

  * | ``--idea-idea-version``
      ``choice``
      (Default: ``11``)
    |
      The IntelliJ IDEA version the project configuration should be generated for; can be one of: [u'10', u'11', u'12', u'9']

  * | ``--idea-merge/--no-idea-merge``
      (Default: ``True``)
    |
      Merge any manual customizations in existing Intellij IDEA configuration. If False, manual customizations will be over-written.

  * | ``--idea-open/--no-idea-open``
      (Default: ``True``)
    |
      Attempts top open the generated project in IDEA.

  * | ``--idea-bash/--no-idea-bash``
    |
      Adds a bash facet to the generated project configuration.

  * | ``--idea-scala-language-level``
      ``choice``
      (Default: ``2.9``)
    |
      Set the scala language level used for IDEA linting.

  * | ``--idea-scala-maximum-heap-size``
      ``string``
    |
      Sets the maximum heap size (in megabytes) for scalac.

  * | ``--idea-fsc/--no-idea-fsc``
    |
      If the project contains any scala targets this specifies the fsc compiler should be enabled.

  * | ``--idea-java-encoding``
      ``string``
      (Default: ``UTF-8``)
    |
      Sets the file encoding for java files in this project.

  * | ``--idea-java-maximum-heap-size``
      ``string``
    |
      Sets the maximum heap size (in megabytes) for javac.

  * | ``--idea-exclude-maven-target/--no-idea-exclude-maven-target``
    |
      Exclude 'target' directories for directories containing pom.xml files.  These directories contain generated code andcopies of files staged for deployment.




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`



.. _gref_goal_imports:

imports
-----------------------------------------------------------------------------



* Implemented by ``abc.IvyImports_imports.ivy-imports``






**Other command-line options:**

  `Common`_



.. _gref_goal_invalidate:

invalidate
-----------------------------------------------------------------------------

Invalidate all targets.


.. _gref_cli_invalidatengkillall:

*
  **invalidate.ng-killall**
  Implemented by ``abc.NailgunKillall_invalidate.ng-killall``



  * | ``--invalidate-ng-killall-everywhere``
    |
      Kill all nailguns servers launched by pants for all workspaces on the system.



* Implemented by ``abc.Invalidator_invalidate``






**Other command-line options:**

  `Common`_
  :ref:`ng-killall <gref_cli_ngkillall>`



.. _gref_goal_jar:

jar
-----------------------------------------------------------------------------



.. _gref_cli_jar:

*
  **jar**
  Implemented by ``abc.JarCreate_jar``



  * | ``--jar-compressed/--no-jar-compressed``
      (Default: ``True``)
    |
      Create compressed jars.




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`
  :ref:`compile.scalastyle <gref_cli_compilescalastyle>`



.. _gref_goal_killserver:

killserver
-----------------------------------------------------------------------------

Kill the reporting server.


* Implemented by ``abc.KillServer_killserver``






**Other command-line options:**

  `Common`_



.. _gref_goal_list:

list
-----------------------------------------------------------------------------

List available BUILD targets.


.. _gref_cli_list:

*
  **list**
  Implemented by ``abc.ListTargets_list``



  * | ``--list-provides``
    |
      Specifies only targets that provide an artifact should be listed. The output will be 2 columns in this case: [target address] [artifact id]

  * | ``--list-provides-columns``
      ``string``
      (Default: ``address,artifact_id``)
    |
      Specifies the columns to include in listing output when restricting the listing to targets that provide an artifact. Available columns are: address, artifact_id, repo_name, repo_url and repo_db

  * | ``--list-documented``
    |
      Prints only targets that are documented with a description.




**Other command-line options:**

  `Common`_



.. _gref_goal_markdown:

markdown
-----------------------------------------------------------------------------

Generate html from markdown docs.


* Implemented by ``abc.MarkdownToHtml_markdown``






**Other command-line options:**

  `Common`_



.. _gref_goal_minimize:

minimize
-----------------------------------------------------------------------------

Print the minimal cover of the given targets.


* Implemented by ``abc.MinimalCover_minimize``






**Other command-line options:**

  `Common`_



.. _gref_goal_ng-killall:

ng-killall
-----------------------------------------------------------------------------

Kill running nailgun servers.


.. _gref_cli_ngkillall:

*
  **ng-killall**
  Implemented by ``abc.NailgunKillall_ng-killall``



  * | ``--ng-killall-everywhere``
    |
      Kill all nailguns servers launched by pants for all workspaces on the system.




**Other command-line options:**

  `Common`_



.. _gref_goal_path:

path
-----------------------------------------------------------------------------

Find a dependency path from one target to another.


* Implemented by ``abc.Path_path``






**Other command-line options:**

  `Common`_



.. _gref_goal_pathdeps:

pathdeps
-----------------------------------------------------------------------------

Print out all paths containing BUILD files the target depends on.


* Implemented by ``abc.PathDeps_pathdeps``






**Other command-line options:**

  `Common`_



.. _gref_goal_paths:

paths
-----------------------------------------------------------------------------

Find all dependency paths from one target to another.


* Implemented by ``abc.Paths_paths``






**Other command-line options:**

  `Common`_



.. _gref_goal_provides:

provides
-----------------------------------------------------------------------------

Print the symbols provided by the given targets.


.. _gref_cli_provides:

*
  **provides**
  Implemented by ``abc.Provides_provides``



  * | ``--provides-transitive``
    |
      Shows the symbols provided not just by the specified targets but by all their transitive dependencies.

  * | ``--provides-also-write-to-stdout``
    |
      If set, also outputs the provides information to stdout.




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`
  :ref:`compile.scalastyle <gref_cli_compilescalastyle>`
  :ref:`jar <gref_cli_jar>`



.. _gref_goal_publish:

publish
-----------------------------------------------------------------------------

Publish artifacts.


.. _gref_cli_publish:

*
  **publish**
  Implemented by ``abc.JarPublish_publish``



  * | ``--publish-dryrun/--no-publish-dryrun``
      (Default: ``True``)
    |
      Runs through a push without actually pushing artifacts, editing publish dbs or otherwise writing data

  * | ``--no-publish-commit``
      (Default: ``True``)
    |
      Turns off commits of the push db for local testing.

  * | ``--publish-local``
      ``string``
    |
      Publishes jars to a maven repository on the local filesystem at the specified path.

  * | ``--publish-scm-push-attempts``
      ``int``
      (Default: ``5``)
    |
      Number of times to try pushing the pushdb to the SCM before aborting

  * | ``--publish-local-snapshot/--no-publish-local-snapshot``
      (Default: ``True``)
    |
      Iff --publish-local is specified, publishes jars with '-SNAPSHOT' revision suffixes.

  * | ``--publish-named-snapshot``
      ``string``
    |
      Publishes all artifacts with the given snapshot name replacing their version. This is not Semantic Versioning compatible, but is easier to consume in cases where many artifacts must align.

  * | ``--publish-transitive/--no-publish-transitive``
      (Default: ``True``)
    |
      Publishes the specified targets and all their internal dependencies transitively.

  * | ``--publish-force/--no-publish-force``
    |
      Forces pushing jars even if there have been no changes since the last push.

  * | ``--publish-override``
      ``string``
    |
      Specifies a published jar revision override in the form:
      ([org]#[name]|[target spec])=[new revision]
      
      For example, to specify 2 overrides:
      --publish-override=com.twitter.common#quantity=0.1.2 \
      --publish-override=src/java/com/twitter/common/base=1.0.0 \

  * | ``--publish-restart-at``
      ``string``
    |
      Restart a fail push at the given jar.  Jars can be identified by
      maven coordinate [org]#[name] or target.
      
      For example:
      --publish-restart-at=com.twitter.common#quantity
      
      Or:
      --publish-restart-at=src/java/com/twitter/common/base




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`
  :ref:`compile.scalastyle <gref_cli_compilescalastyle>`
  :ref:`jar <gref_cli_jar>`
  :ref:`doc.javadoc <gref_cli_docjavadoc>`
  :ref:`doc.scaladoc <gref_cli_docscaladoc>`



.. _gref_goal_repl:

repl
-----------------------------------------------------------------------------

Run a REPL.


.. _gref_cli_replpythonrepl:

*
  **repl.python-repl**
  Implemented by ``abc.PythonRepl_repl.python-repl``



  * | ``--repl-python-repl-timeout``
      ``int``
    |
      Number of seconds to wait for http connections.

  * | ``--repl-python-repl-ipython``
    |
      Run an IPython REPL instead of the standard python one.



.. _gref_cli_replscalarepl:

*
  **repl.scala-repl**
  Implemented by ``abc.ScalaRepl_repl.scala-repl``



  * | ``--repl-scala-repl-jvmargs``
      ``string``
    |
      Run the repl in a jvm with these extra jvm args.

  * | ``--repl-scala-repl-args``
      ``string``
    |
      run the repl in a jvm with extra args.




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`
  :ref:`compile.scalastyle <gref_cli_compilescalastyle>`



.. _gref_goal_repl-dirty:

repl-dirty
-----------------------------------------------------------------------------

Run a REPL, skipping compilation.


.. _gref_cli_repldirtyscalarepldirty:

*
  **repl-dirty.scala-repl-dirty**
  Implemented by ``abc.ScalaRepl_repl-dirty.scala-repl-dirty``



  * | ``--repl-dirty-scala-repl-dirty-jvmargs``
      ``string``
    |
      Run the repl in a jvm with these extra jvm args.

  * | ``--repl-dirty-scala-repl-dirty-args``
      ``string``
    |
      run the repl in a jvm with extra args.




**Other command-line options:**

  `Common`_



.. _gref_goal_resolve:

resolve
-----------------------------------------------------------------------------

Resolve dependencies and produce dependency reports.


.. _gref_cli_resolveivy:

*
  **resolve.ivy**
  Implemented by ``abc.IvyResolve_resolve.ivy``



  * | ``--resolve-ivy-override``
      ``string``
    |
      Specifies a jar dependency override in the form:
      [org]#[name]=(revision|url)
      
      For example, to specify 2 overrides:
      --resolve-ivy-override=com.foo#bar=0.1.2 \
      --resolve-ivy-override=com.baz#spam=file:///tmp/spam.jar

  * | ``--resolve-ivy-report/--no-resolve-ivy-report``
    |
      Generate an ivy resolve html report

  * | ``--resolve-ivy-open/--no-resolve-ivy-open``
    |
      Attempt to open the generated ivy resolve report in a browser (implies --resolve-ivy-report).

  * | ``--resolve-ivy-outdir``
      ``string``
    |
      Emit ivy report outputs in to this directory.

  * | ``--resolve-ivy-args``
      ``string``
    |
      Pass these extra args to ivy.

  * | ``--resolve-ivy-mutable-pattern``
      ``string``
    |
      If specified, all artifact revisions matching this pattern will be treated as mutable unless a matching artifact explicitly marks mutable as False.




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`



.. _gref_goal_resources:

resources
-----------------------------------------------------------------------------



* Implemented by ``abc.PrepareResources_resources.prepare``






**Other command-line options:**

  `Common`_



.. _gref_goal_roots:

roots
-----------------------------------------------------------------------------

Print the workspace's source roots and associated target types.


* Implemented by ``abc.ListRoots_roots``






**Other command-line options:**

  `Common`_



.. _gref_goal_run:

run
-----------------------------------------------------------------------------

Run a binary target.


.. _gref_cli_runpythonrun:

*
  **run.python-run**
  Implemented by ``abc.PythonRun_run.python-run``



  * | ``--run-python-run-timeout``
      ``int``
    |
      Number of seconds to wait for http connections.



.. _gref_cli_runjvmrun:

*
  **run.jvm-run**
  Implemented by ``abc.JvmRun_run.jvm-run``



  * | ``--run-jvm-run-jvmargs``
      ``string``
    |
      Run binary in a jvm with these extra jvm args.

  * | ``--run-jvm-run-args``
      ``string``
    |
      Run binary with these main() args.

  * | ``--run-jvm-run-debug/--no-run-jvm-run-debug``
    |
      Run binary with a debugger

  * | ``--run-jvm-run-only-write-cmd-line``
      ``string``
    |
      Instead of running, just write the cmd line to this file




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`
  :ref:`compile.scalastyle <gref_cli_compilescalastyle>`



.. _gref_goal_run-dirty:

run-dirty
-----------------------------------------------------------------------------

Run a binary target, skipping compilation.


.. _gref_cli_rundirtyjvmrundirty:

*
  **run-dirty.jvm-run-dirty**
  Implemented by ``abc.JvmRun_run-dirty.jvm-run-dirty``



  * | ``--run-dirty-jvm-run-dirty-jvmargs``
      ``string``
    |
      Run binary in a jvm with these extra jvm args.

  * | ``--run-dirty-jvm-run-dirty-args``
      ``string``
    |
      Run binary with these main() args.

  * | ``--run-dirty-jvm-run-dirty-debug/--no-run-dirty-jvm-run-dirty-debug``
    |
      Run binary with a debugger

  * | ``--run-dirty-jvm-run-dirty-only-write-cmd-line``
      ``string``
    |
      Instead of running, just write the cmd line to this file




**Other command-line options:**

  `Common`_



.. _gref_goal_server:

server
-----------------------------------------------------------------------------

Run the pants reporting server.


.. _gref_cli_server:

*
  **server**
  Implemented by ``abc.RunServer_server``



  * | ``--server-port``
      ``int``
    |
      Serve on this port. Leave unset to choose a free port automatically (recommended if using pants concurrently in multiple workspaces on the same host).

  * | ``--server-allowed-clients``
      ``string``
      (Default: ``[u'127.0.0.1']``)
    |
      Only requests from these IPs may access this server. Useful for temporarily showing build results to a colleague. The special value ALL means any client may connect. Use with caution, as your source code is exposed to all allowed clients!

  * | ``--server-open/--no-server-open``
    |
      Attempt to open the server web ui in a browser.




**Other command-line options:**

  `Common`_



.. _gref_goal_sign:

sign
-----------------------------------------------------------------------------



.. _gref_cli_sign:

*
  **sign**
  Implemented by ``abc.JarsignerTask_sign``



  * | ``--sign-build-type``
      ``string``
    |
      One of ['debug', 'release']. Specifies the build type and which keystore to sign the package.




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`
  :ref:`compile.scalastyle <gref_cli_compilescalastyle>`
  :ref:`dex <gref_cli_dex>`
  :ref:`bundle <gref_cli_bundle>`
  :ref:`bundle.dup <gref_cli_bundledup>`
  :ref:`bundle.apk <gref_cli_bundleapk>`



.. _gref_goal_sitegen:

sitegen
-----------------------------------------------------------------------------

Generate static web site.


* Implemented by ``abc.SiteGen_sitegen``






**Other command-line options:**

  `Common`_



.. _gref_goal_sort:

sort
-----------------------------------------------------------------------------

Topologically sort the targets.


.. _gref_cli_sort:

*
  **sort**
  Implemented by ``abc.SortTargets_sort``



  * | ``--sort-reverse/--no-sort-reverse``
    |
      Sort least dependent to most.




**Other command-line options:**

  `Common`_



.. _gref_goal_targets:

targets
-----------------------------------------------------------------------------

List target types and BUILD file symbols (python_tests, jar, etc).


* Implemented by ``abc.TargetsHelp_targets``






**Other command-line options:**

  `Common`_



.. _gref_goal_test:

test
-----------------------------------------------------------------------------

Test compiled code.


.. _gref_cli_testpytest:

*
  **test.pytest**
  Implemented by ``abc.PytestRun_test.pytest``



  * | ``--test-pytest-timeout``
      ``int``
    |
      Number of seconds to wait for http connections.

  * | ``--test-pytest-fast/--no-test-pytest-fast``
      (Default: ``True``)
    |
      Run all tests in a single chroot. If set to false, each test target will create a new chroot, which will be much slower.

  * | ``--test-pytest-options``
      ``string``
    |
      options to pass to the underlying pytest runner.



.. _gref_cli_testjunit:

*
  **test.junit**
  Implemented by ``abc.JUnitRun_test.junit``



  * | ``--test-junit-coverage-patterns``
      ``string``
    |
      By default all non-test code depended on by the selected tests is measured for coverage during the test run.  By specifying coverage patterns you can select which classes and packages should be counted.  Values should be class name prefixes in dotted form with ? and * wildcard support. If preceded with a - the pattern is excluded. For example, to include all code in com.twitter.raven except claws and the eye you would use: --test-junit-coverage-patterns=com.twitter.raven.* --test-junit-coverage-patterns=-com.twitter.raven.claw --test-junit-coverage-patterns=-com.twitter.raven.EyeThis option can be specified multiple times.

  * | ``--test-junit-coverage-console/--no-test-junit-coverage-console``
      (Default: ``True``)
    |
      Outputs a simple coverage report to the console.

  * | ``--test-junit-coverage-xml/--no-test-junit-coverage-xml``
    |
      [%%default] Produces an xml coverage report.

  * | ``--test-junit-coverage-html/--no-test-junit-coverage-html``
    |
      [%%default] Produces an html coverage report.

  * | ``--test-junit-coverage-html-open/--no-test-junit-coverage-html-open``
    |
      Tries to open the generated html coverage report, implies --test-junit-coverage-html.

  * | ``--test-junit-skip/--no-test-junit-skip``
    |
      Skip running tests

  * | ``--test-junit-debug/--no-test-junit-debug``
    |
      Run junit tests with a debugger

  * | ``--test-junit-fail-fast/--no-test-junit-fail-fast``
    |
      Fail fast on the first test failure in a suite

  * | ``--test-junit-batch-size``
      ``int``
      (Default: ``9223372036854775807``)
    |
      [ALL] Runs at most this many tests in a single test process.

  * | ``--test-junit-jvmargs``
      ``string``
    |
      Runs junit tests in a jvm with these extra jvm args.

  * | ``--test-junit-test``
      ``string``
    |
      Force running of just these tests.  Tests can be specified using any of: [classname], [classname]#[methodname], [filename] or [filename]#[methodname]

  * | ``--test-junit-xmlreport/--no-test-junit-xmlreport``
    |
      Causes an xml report to be output for each test class that is run.

  * | ``--test-junit-per-test-timer/--no-test-junit-per-test-timer``
    |
      Shows progress and timer for each test class that is run.

  * | ``--test-junit-default-parallel/--no-test-junit-default-parallel``
    |
      Whether to run classes without @TestParallel or @TestSerial annotations in parallel.

  * | ``--test-junit-parallel-threads``
      ``int``
    |
      Number of threads to run tests in parallel. 0 for autoset.

  * | ``--test-junit-test-shard``
      ``string``
    |
      Subset of tests to run, in the form M/N, 0 <= M < N.For example, 1/3 means run tests number 2, 5, 8, 11, ...

  * | ``--test-junit-suppress-output/--no-test-junit-suppress-output``
      (Default: ``True``)
    |
      Redirects test output to files (in .pants.d/test/junit). Implied by --test-junit-xmlreport

  * | ``--test-junit-arg``
      ``string``
    |
      An arbitrary argument to pass directly to the test runner. This option can be specified multiple times.

  * | ``--test-junit-coverage/--no-test-junit-coverage``
    |
      Collects code coverage data

  * | ``--test-junit-coverage-processor``
      ``string``
      (Default: ``emma``)
    |
      Which coverage subsystem to use



.. _gref_cli_testspecs:

*
  **test.specs**
  Implemented by ``abc.SpecsRun_test.specs``



  * | ``--test-specs-skip/--no-test-specs-skip``
    |
      Skip running specs

  * | ``--test-specs-debug/--no-test-specs-debug``
    |
      Run specs with a debugger

  * | ``--test-specs-jvmargs``
      ``string``
    |
      Runs specs in a jvm with these extra jvm options.

  * | ``--test-specs-test``
      ``string``
    |
      Force running of just these specs.  Tests can be specified either by fully qualified classname or full file path.

  * | ``--test-specs-color/--no-test-specs-color``
      (Default: ``True``)
    |
      Emit test result with ANSI terminal color codes.




**Other command-line options:**

  `Common`_
  :ref:`gen.thrift <gref_cli_genthrift>`
  :ref:`gen.scrooge <gref_cli_genscrooge>`
  :ref:`gen.protoc <gref_cli_genprotoc>`
  :ref:`gen.aapt <gref_cli_genaapt>`
  :ref:`check-exclusives <gref_cli_checkexclusives>`
  :ref:`resolve.ivy <gref_cli_resolveivy>`
  :ref:`compile.scalastyle <gref_cli_compilescalastyle>`



.. _gref_goal_thrift-linter:

thrift-linter
-----------------------------------------------------------------------------

Check thrift files for non-recommended usage patterns.


.. _gref_cli_thriftlinter:

*
  **thrift-linter**
  Implemented by ``abc.ThriftLinter_thrift-linter``



  * | ``--thrift-linter-strict/--no-thrift-linter-strict``
    |
      Fail the goal if thrift errors are found.




**Other command-line options:**

  `Common`_




Common
-----------------------------------------------------------------------------

These command-line flags are available with all Pants goals.

  ``-h/--help``
  Show this help message.

  ``-t/--timeout``
  Number of seconds to wait for http connections.

  ``-x/--time``
  Times tasks and goals and outputs a report.

  ``-e/--explain``
  Explain the execution of goals.

  ``-k/--kill-nailguns``
  Kill nailguns before exiting

  ``-d/--logdir``
  Write logs to files under this directory.

  ``-l/--level``
  Set the logging level [debug, info, warn].

  ``-q/--quiet``
  Squelches all console output apart from errors.

  ``-i/--interpreter``
  Constrain what Python interpreters to use.  Uses Requirement format from pkg_resources, e.g. 'CPython&gt;=2.6,&lt;3' or 'PyPy'. By default, no constraints are used.  Multiple constraints may be added.  They will be ORed together.

  ``--no-colors``
  Do not colorize log messages.

  ``--no-lock``
  Don't attempt to grab the global lock. This lock prevents two concurrent pants instances from stomping on each others data, so only use this if you know what you're doing.

  ``--read-from-artifact-cache/--no-read-from-artifact-cache``
  Read build artifacts from cache, if available.

  ``--exclude-target-regexp``
  Regex pattern to exclude from the target list (useful in conjunction with ::). Multiple patterns may be specified by setting this flag multiple times.

  ``--write-to-artifact-cache/--no-write-to-artifact-cache``
  Write build artifacts to cache, if possible.

  ``--print-exception-stacktrace``
  Print to console the full exception stack trace if encountered.

  ``--fail-fast``
  When parsing specs, will stop on the first erronous BUILD file encountered. Otherwise, will parse all builds in a spec and then throw an Exception.

