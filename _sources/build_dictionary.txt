BUILD Dictionary
====================

A ``BUILD`` file defines one or more *build targets*.
A build target might create a jar or a deployable package,
run some tests or perform whatever actions you might associate
with the ant concept of a build target. This page describes the
commands and values available. Many of these define ``BUILD``
targets; some are handy utilities.

**All The Things** |
`android_binary`_ |
`android_resources`_ |
`annotation_processor`_ |
`artifact`_ |
`benchmark`_ |
`buildfile_path`_ |
`bundle`_ |
`ConfluencePublish`_ |
`credentials`_ |
`dependencies`_ |
`Duplicate`_ |
`egg`_ |
`exclude`_ |
`get_buildroot`_ |
`globs`_ |
`jar`_ |
`jar_library`_ |
`jar_rules`_ |
`java_agent`_ |
`java_antlr_library`_ |
`java_library`_ |
`java_protobuf_library`_ |
`java_ragel_library`_ |
`java_tests`_ |
`java_thrift_library`_ |
`jaxb_library`_ |
`junit_tests`_ |
`jvm_app`_ |
`jvm_binary`_ |
`keystore`_ |
`maven_layout`_ |
`netrc`_ |
`page`_ |
`pants`_ |
`pants_version`_ |
`python_antlr_library`_ |
`python_binary`_ |
`python_library`_ |
`python_requirement`_ |
`python_requirement_library`_ |
`python_requirements`_ |
`python_test_suite`_ |
`python_tests`_ |
`python_thrift_library`_ |
`repo`_ |
`resources`_ |
`rglobs`_ |
`scala_library`_ |
`scala_specs`_ |
`scala_tests`_ |
`scalac_plugin`_ |
`setup_py`_ |
`Skip`_ |
`source_root`_ |
`target`_ |
`wiki`_ |
`wiki_artifact`_ |
`zglobs`_ |

**JVM** |
`android_binary`_ |
`android_resources`_ |
`annotation_processor`_ |
`artifact`_ |
`benchmark`_ |
`buildfile_path`_ |
`bundle`_ |
`ConfluencePublish`_ |
`credentials`_ |
`Duplicate`_ |
`exclude`_ |
`globs`_ |
`jar`_ |
`jar_library`_ |
`jar_rules`_ |
`java_agent`_ |
`java_antlr_library`_ |
`java_library`_ |
`java_protobuf_library`_ |
`java_ragel_library`_ |
`java_thrift_library`_ |
`junit_tests`_ |
`jvm_app`_ |
`jvm_binary`_ |
`keystore`_ |
`page`_ |
`repo`_ |
`resources`_ |
`rglobs`_ |
`scala_library`_ |
`scala_specs`_ |
`scalac_plugin`_ |
`Skip`_ |
`target`_ |
`wiki`_ |
`wiki_artifact`_ |
`zglobs`_ |

**Python** |
`buildfile_path`_ |
`ConfluencePublish`_ |
`globs`_ |
`page`_ |
`python_binary`_ |
`python_library`_ |
`python_requirement`_ |
`python_requirement_library`_ |
`python_requirements`_ |
`python_tests`_ |
`resources`_ |
`rglobs`_ |
`setup_py`_ |
`target`_ |
`wiki`_ |
`wiki_artifact`_ |
`zglobs`_ |


.. _bdict_android_binary:

android_binary
-------------------------------------------------------------------------------

.. py:function:: android_binary(build_type=None, *args, **kwargs)

 Produces an Android binary.


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param sources: Source code files to compile. Paths are relative to the
   BUILD file's directory.
 :type sources: ``Fileset`` or list of strings.
 :param excludes: List of :ref:`exclude <bdict_exclude>`\s
   to filter this target's transitive dependencies against.
 :param build_tools_version: API for the Build Tools (separate from SDK version).
   Defaults to the latest full release.
 :param manifest: path/to/file of 'AndroidManifest.xml' (required name). Paths are relative
   to the BUILD file's directory.
 :param string build_type: One of [debug, release]. The keystore to sign the package with.
   Set as 'debug' by default.

 Implemented by ``pants.backend.android.targets.android_binary.AndroidBinary``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_android_resources:

android_resources
-------------------------------------------------------------------------------

.. py:function:: android_resources(resource_dir=None, **kwargs)

 Processes android resources to generate R.java


 :param string resource_dir: path/to/directory containing Android resource files,
  often named 'res'.
 :param dependencies: Other targets that this target depends on.
 :type dependencies: list of target specs

 Implemented by ``pants.backend.android.targets.android_resources.AndroidResources``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_annotation_processor:

annotation_processor
-------------------------------------------------------------------------------

.. py:function:: annotation_processor(processors=None, *args, **kwargs)

 Produces a Java library containing one or more annotation processors.


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param sources: Source code files to compile. Paths are relative to the
   BUILD file's directory.
 :type sources: ``Fileset`` or list of strings
 :param provides: The ``artifact``
   to publish that represents this target outside the repo.
 :param dependencies: Other targets that this target depends on.
 :type dependencies: list of target specs
 :param excludes: List of :ref:`exclude <bdict_exclude>`\s
   to filter this target's transitive dependencies against.
 :param resources: An optional list of file paths (DEPRECATED) or
   ``resources`` targets (which in turn point to file paths). The paths
   indicate text file resources to place in this module's jar.
 :param processors: A list of the fully qualified class names of the
   annotation processors this library exports.
 :param exclusives: An optional map of exclusives tags. See :ref:`howto_check_exclusives` for details.

 Implemented by ``pants.backend.jvm.targets.annotation_processor.AnnotationProcessor``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_artifact:

artifact
-------------------------------------------------------------------------------

.. py:function:: artifact(org, name, repo, description=None)

 Represents a jvm artifact ala maven or ivy.
 
 Used in the ``provides`` parameter to *jvm*\_library targets.


 :param string org: Organization of this artifact, or groupId in maven parlance.
 :param string name: Name of the artifact, or artifactId in maven parlance.
 :param repo: The ``repo`` this artifact is published to.
 :param string description: Description of this artifact.

 Implemented by ``pants.backend.jvm.targets.artifact.Artifact``


.. _bdict_benchmark:

benchmark
-------------------------------------------------------------------------------

.. py:function:: benchmark(address=None, sources=None, sources_rel_path=None, provides=None, excludes=None, resources=None, configurations=None, **kwargs)

 A caliper benchmark.
 
 Run it with the ``bench`` goal.


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param sources: Source code files to compile. Paths are relative to the
   BUILD file's directory.
 :type sources: ``Fileset`` or list of strings
 :param dependencies: Other targets that this target depends on.
 :type dependencies: list of target specs
 :param excludes: List of :ref:`exclude <bdict_exclude>`\s
   to filter this target's transitive dependencies against.
 :param configurations: One or more ivy configurations to resolve for this target.
   This parameter is not intended for general use.
 :type configurations: tuple of strings

 Implemented by ``pants.backend.jvm.targets.benchmark.Benchmark``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_buildfile_path:

buildfile_path
-------------------------------------------------------------------------------

.. py:function:: buildfile_path(parse_context)

 Returns path containing this ``BUILD`` file.



 Implemented by ``pants.backend.core.register.BuildFilePath``


.. _bdict_bundle:

bundle
-------------------------------------------------------------------------------

.. py:function:: bundle(cls, parse_context)



 Return a factory method that can create bundles rooted at the parse context path.

 Implemented by ``pants.backend.jvm.targets.jvm_binary.factory``


.. _bdict_ConfluencePublish:

ConfluencePublish
-------------------------------------------------------------------------------

.. py:function:: ConfluencePublish(*args, **kwargs)




 Implemented by ``pants.backend.core.tasks.confluence_publish.ConfluencePublish``


.. _bdict_credentials:

credentials
-------------------------------------------------------------------------------

.. py:function:: credentials(username=None, password=None, **kwargs)

 Supplies credentials for a maven repository on demand.
 
 The ``jar-publish`` section of your ``pants.ini`` file can refer to one
 or more of these.


 :param string name: The name of these credentials.
 :param username: Either a constant username value or else a callable that can fetch one.
 :type username: string or callable
 :param password: Either a constant password value or else a callable that can fetch one.
 :type password: string or callable

 Implemented by ``pants.backend.jvm.targets.credentials.Credentials``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_dependencies:

dependencies
-------------------------------------------------------------------------------



 Old name for `target`_




.. _bdict_Duplicate:

Duplicate
-------------------------------------------------------------------------------

.. py:function:: Duplicate(apply_pattern, action)

 A rule that indicates how duplicate entries should be handled when building a jar.


 Creates a rule for handling duplicate jar entries.
 
 :param str apply_pattern: A regular expression that matches duplicate jar entries this rule
   applies to.
 :param action: An action to take to handle one or more duplicate entries.  Must be one of:
   ``Duplicate.SKIP``, ``Duplicate.REPLACE``, ``Duplicate.CONCAT`` or ``Duplicate.FAIL``.

 Implemented by ``pants.backend.jvm.targets.jvm_binary.Duplicate``


.. _bdict_egg:

egg
-------------------------------------------------------------------------------



 In older Pants, loads a pre-built Python egg from file system. Undefined in newer Pants.




.. _bdict_exclude:

exclude
-------------------------------------------------------------------------------

.. py:function:: exclude(org, name=None)

 Represents a dependency exclude pattern to filter transitive dependencies against.


 :param string org: Organization of the artifact to filter,
   known as groupId in Maven parlance.
 :param string name: Name of the artifact to filter in the org, or filter
   everything if unspecified.

 Implemented by ``pants.backend.jvm.targets.exclude.Exclude``


.. _bdict_get_buildroot:

get_buildroot
-------------------------------------------------------------------------------

.. py:function:: get_buildroot()



 Returns the pants ROOT_DIR, calculating it if needed.

 Implemented by ``pants.base.build_environment.get_buildroot``


.. _bdict_globs:

globs
-------------------------------------------------------------------------------

.. py:function:: globs(parse_context)

 Returns Fileset containing matching files in same directory as this BUILD file.
 
 E.g., ``sources = globs('*java'),`` to get .java files in this directory.



 Implemented by ``pants.backend.core.wrapped_globs.Globs``


.. _bdict_jar:

jar
-------------------------------------------------------------------------------

.. py:function:: jar(org, name, rev=None, force=False, ext=None, url=None, apidocs=None, type_=None, classifier=None, mutable=None, exclusives=None)

 A pre-built Maven repository dependency.


 :param string org: The Maven ``groupId`` of this dependency.
 :param string name: The Maven ``artifactId`` of this dependency.
 :param string rev: The Maven ``version`` of this dependency.
   If unspecified the latest available version is used.
 :param boolean force: Force this specific artifact revision even if other transitive
   dependencies specify a different revision. This requires specifying the ``rev`` parameter.
 :param string ext: Extension of the artifact if different from the artifact type.
   This is sometimes needed for artifacts packaged with Maven bundle type but stored as jars.
 :param string url: URL of this artifact, if different from the Maven repo standard location
   (specifying this parameter is unusual).
 :param string apidocs: URL of existing javadocs, which if specified, pants-generated javadocs
   will properly hyperlink {\ @link}s.
 :param string type_: Artifact packaging type.
 :param string classifier: Classifier specifying the artifact variant to use.
   Use multiple ``with_artifact`` statements to include multiple artifacts of the same org.name,
   but with different classifiers.
 :param boolean mutable: Inhibit caching of this mutable artifact. A common use is for
   Maven -SNAPSHOT style artifacts in an active development/integration cycle.

 Implemented by ``pants.backend.jvm.targets.jar_dependency.JarDependency``

**Methods:**

 .. py:method:: exclude(org, name=None)

  Adds a transitive dependency of this jar to the exclude list.

 .. py:method:: intransitive()

  Declares this Dependency intransitive, indicating only the jar for the dependency itself
  should be downloaded and placed on the classpath

 .. py:method:: with_artifact(name=None, type_=None, ext=None, url=None, configuration=None, classifier=None)

  Sets an alternative artifact to fetch or adds additional artifacts if called multiple times.
  
  :param name: The name of the published artifact. This name must not include revision.
  :param type_: The type of the published artifact. It's usually the same as the artifact's file
    extension, but not necessarily. For instance, ivy files are of type 'ivy' but have 'xml' as
    their file extension.
  :param ext: The file extension of the published artifact.
  :param url: The url at which this artifact can be found if it isn't located at the standard
    location in the repository.
  :param configuration: The public configuration in which this artifact is published. The '*' wildcard can
    be used to designate all public configurations.
  :param classifier: The maven classifier of this artifact.

 .. py:method:: with_sources()

  This requests the artifact have its source jar fetched.
  (This implies there *is* a source jar to fetch.) Used in contexts
  that can use source jars (as of 2013, just eclipse and idea goals).

.. _bdict_jar_library:

jar_library
-------------------------------------------------------------------------------

.. py:function:: jar_library(jars=None, *args, **kwargs)

 A set of jars that may be depended upon.


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param jars: List of :ref:`jar <bdict_jar>`\s to depend upon.
 :param exclusives: An optional map of exclusives tags. See :ref:`howto_check_exclusives` for details.

 Implemented by ``pants.backend.jvm.targets.jar_library.JarLibrary``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_jar_rules:

jar_rules
-------------------------------------------------------------------------------

.. py:function:: jar_rules(rules=None, default_dup_action=&lt;object object at 0x105576230&gt;)

 A set of rules for packaging up a deploy jar.
 
 Deploy jars are executable jars with fully self-contained classpaths and as such, assembling them
 presents problems given jar semantics.
 
 One issue is signed jars that must be included on the
 classpath.  These have a signature that depends on the jar contents and assembly of the deploy jar
 changes the content of the jar, breaking the signatures.  For cases like these the signed jars
 must be verified and then the signature information thrown away.  The :ref:`Skip <bdict_Skip>`
 rule supports this sort of issue by allowing outright entry exclusion in the final deploy jar.
 
 Another issue is duplicate jar entries.  Although the underlying zip format supports these, the
 java jar tool and libraries do not.  As such some action must be taken for each duplicate entry
 such that there are no duplicates in the final deploy jar.  The four
 :ref:`Duplicate <bdict_Duplicate>` rules support resolution of these cases by allowing 1st wins,
 last wins, concatenation of the duplicate entry contents or raising an exception.


 Creates a new set of jar rules with the default duplicate action of ``Duplicate.SKIP``.
 
 :param rules: One or more rules that will be applied in order to jar entries being packaged in
   a deploy jar.
 :param default_dup_action: The default action to take when a duplicate entry is encountered and
   no explicit rules apply to the entry.

 Implemented by ``pants.backend.jvm.targets.jvm_binary.JarRules``


.. _bdict_java_agent:

java_agent
-------------------------------------------------------------------------------

.. py:function:: java_agent(name, sources=None, excludes=None, resources=None, exclusives=None, premain=None, agent_class=None, can_redefine=False, can_retransform=False, can_set_native_method_prefix=False, **kwargs)

 Defines a java agent entrypoint.


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param sources: Source code files to compile. Paths are relative to the
   BUILD file's directory.
 :type sources: ``Fileset`` or list of strings
 :param dependencies: Other targets that this target depends on.
 :type dependencies: list of target specs
 :param excludes: List of :ref:`exclude <bdict_exclude>`\s
   to filter this target's transitive dependencies against.
 :param resources: An optional list of file paths (DEPRECATED) or
   ``resources`` targets (which in turn point to file paths). The paths
   indicate text file resources to place in this module's jar.
 :param exclusives: An optional map of exclusives tags. See :ref:`howto_check_exclusives` for details.
 :param string premain: When an agent is specified at JVM launch time this attribute specifies
   the agent class. Exactly one of ``premain`` or ``agent_class`` must be specified.
 :param string agent_class: If an implementation supports a mechanism to start agents sometime
   after the VM has started then this attribute specifies the agent class. Exactly one of
   ``premain`` or ``agent_class`` must be specified.
 :param bool can_redefine: `True` if the ability to redefine classes is needed by this agent;
   `False` by default.
 :param bool can_retransform: `True` if the ability to retransform classes is needed by this
   agent; `False` by default.
 :param bool can_set_native_method_prefix: `True` if the ability to set he native method prefix
   is needed by this agent; `False` by default.

 Implemented by ``pants.backend.jvm.targets.java_agent.JavaAgent``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_java_antlr_library:

java_antlr_library
-------------------------------------------------------------------------------

.. py:function:: java_antlr_library(name=None, sources=None, provides=None, excludes=None, compiler=u'antlr3', package=None, **kwargs)

 Generates a stub Java library from Antlr grammar files.


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param sources: Source code files to compile. Paths are relative to the
   BUILD file's directory.
 :type sources: ``Fileset`` or list of strings
 :param provides: The ``artifact``
   to publish that represents this target outside the repo.
 :param dependencies: Other targets that this target depends on.
 :type dependencies: list of target specs
 :param excludes: List of :ref:`exclude <bdict_exclude>`\s
   to filter this target's transitive dependencies against.
 :param compiler: The name of the compiler used to compile the ANTLR files.
     Currently only supports 'antlr3' and 'antlr4'
 :param package: A string which specifies the package to be used on the dependent sources.
     If unset, the package will be based on the path to the sources. Note that if the sources
     Are spread among different files, this must be set as the package cannot be inferred.

 Implemented by ``pants.backend.codegen.targets.java_antlr_library.JavaAntlrLibrary``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_java_library:

java_library
-------------------------------------------------------------------------------

.. py:function:: java_library(*args, **kwargs)

 A collection of Java code.
 
 Normally has conceptually-related sources; invoking the ``compile`` goal
 on this target compiles Java and generates classes. Invoking the ``jar``
 goal on this target creates a ``.jar``; but that's an unusual thing to do.
 Instead, a ``jvm_binary`` might depend on this library; that binary is a
 more sensible thing to bundle.


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param sources: Source code files to compile. Paths are relative to the
   BUILD file's directory.
 :type sources: ``Fileset`` or list of strings
 :param provides: The ``artifact``
   to publish that represents this target outside the repo.
 :param dependencies: Other targets that this target depends on. If your
    code ``import``\s code from other places, it depends on them.
 :type dependencies: list of target specs
 :param excludes: List of :ref:`exclude <bdict_exclude>`\s
   to filter this target's transitive dependencies against.
 :param resources: An optional list of file paths (DEPRECATED) or
   ``resources`` targets (which in turn point to file paths). The paths
   indicate text file resources to place in this module's jar.
 :param exclusives: An optional map of exclusives tags. See :ref:`howto_check_exclusives` for details.

 Implemented by ``pants.backend.jvm.targets.java_library.JavaLibrary``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_java_protobuf_library:

java_protobuf_library
-------------------------------------------------------------------------------

.. py:function:: java_protobuf_library(buildflags=None, imports=None, **kwargs)

 Generates a stub Java library from protobuf IDL files.


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param sources: Source code files to compile. Paths are relative to the
   BUILD file's directory.
 :type sources: ``Fileset`` or list of strings
 :param provides: The ``artifact``
   to publish that represents this target outside the repo.
 :param dependencies: Other targets that this target depends on.
 :type dependencies: list of target specs
 :param excludes: List of :ref:`exclude <bdict_exclude>`\s
   to filter this target's transitive dependencies against.
 :param buildflags: Unused, and will be removed in a future release.
 :param imports: List of external :class:`pants.backend.jvm.targets.jar_dependency.JarDependency`
   objects and addresses of :class:`pants.backend.jvm.targets.jar_library.JarLibrary` targets
   which contain .proto definitions.
 :param exclusives: An optional map of exclusives tags. See :ref:`howto_check_exclusives` for details.

 Implemented by ``pants.backend.codegen.targets.java_protobuf_library.JavaProtobufLibrary``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_java_ragel_library:

java_ragel_library
-------------------------------------------------------------------------------

.. py:function:: java_ragel_library(**kwargs)

 Generates a stub Java library from a Ragel file.


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param sources: Source code files to compile. Paths are relative to the
   BUILD file's directory.
 :type sources: ``Fileset`` or list of strings
 :param provides: The ``artifact``
   to publish that represents this target outside the repo.
 :param dependencies: Other targets that this target depends on.
 :type dependencies: list of target specs
 :param excludes: List of :ref:`exclude <bdict_exclude>`\s
   to filter this target's transitive dependencies against.
 :param exclusives: An optional map of exclusives tags. See :ref:`howto_check_exclusives` for details.

 Implemented by ``pants.backend.codegen.targets.java_ragel_library.JavaRagelLibrary``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_java_tests:

java_tests
-------------------------------------------------------------------------------



 Old name for `junit_tests`_




.. _bdict_java_thrift_library:

java_thrift_library
-------------------------------------------------------------------------------

.. py:function:: java_thrift_library(compiler=None, language=None, rpc_style=None, namespace_map=None, **kwargs)

 Generates a stub Java or Scala library from thrift IDL files.


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param sources: Source code files to compile. Paths are relative to the
   BUILD file's directory.
 :type sources: ``Fileset`` or list of strings
 :param provides: The ``artifact``
   to publish that represents this target outside the repo.
 :param dependencies: Other targets that this target depends on.
 :type dependencies: list of target specs
 :param excludes: List of :ref:`exclude <bdict_exclude>`\s
   to filter this target's transitive dependencies against.
 :param compiler: The compiler used to compile the thrift files; default is 'thrift'
   (The apache thrift compiler).
 :param language: The language used to generate the output files; defaults to 'java'.
 :param rpc_style: An optional rpc style to generate service stubs with.
 :param namespace_map: An optional dictionary of namespaces to remap {old: new}
 :param exclusives: An optional map of exclusives tags. See :ref:`howto_check_exclusives` for details.

 Implemented by ``pants.backend.codegen.targets.java_thrift_library.JavaThriftLibrary``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_jaxb_library:

jaxb_library
-------------------------------------------------------------------------------

.. py:function:: jaxb_library(package=None, language=u'java', **kwargs)

 Generates a stub Java library from jaxb xsd files.


 :param package: java package (com.company.package) in which to generate the output java files.
   If unspecified, Pants guesses it from the file path leading to the schema
   (xsd) file. This guess is accurate only if the .xsd file is in a path like
   ``.../com/company/package/schema.xsd``. This guess is probably less
   accurate than setting the package explicitly in the ``BUILD`` file.
 :param string language: only 'java' is supported. Default: 'java'
 :param buildflags: (currently unused)
 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param sources: A list of filenames representing the source code this library is compiled from.
 :type sources: ``FileSet`` or list of strings.
 :param dependencies: Other targets that this target depends on.
 :type dependencies: List of target specs.
 :param excludes: List of ``exclude``\s to filter this
   target's transitive dependencies against.
 :param configurations: One or more ivy configurations to resolve for this target. This parameter
   is not intended for general use.
 :type configurations: tuple of strings

 Implemented by ``pants.backend.codegen.targets.jaxb_library.JaxbLibrary``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_junit_tests:

junit_tests
-------------------------------------------------------------------------------

.. py:function:: junit_tests(sources=None, **kwargs)

 Tests JVM sources with JUnit.


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param sources: Source code files to compile. Paths are relative to the
   BUILD file's directory.
 :type sources: ``Fileset`` or list of strings
 :param provides: The ``artifact``
   to publish that represents this target outside the repo.
 :param dependencies: Other targets that this target depends on.
 :type dependencies: list of target specs
 :param excludes: List of :ref:`exclude <bdict_exclude>`\s
   to filter this target's transitive dependencies against.
 :param resources: An optional list of ``resources`` targets containing text
   file resources to place in this module's jar.
 :param exclusives: An optional map of exclusives tags. See :ref:`howto_check_exclusives` for details.

 Implemented by ``pants.backend.jvm.targets.java_tests.JavaTests``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_jvm_app:

jvm_app
-------------------------------------------------------------------------------

.. py:function:: jvm_app(name=None, binary=None, bundles=None, basename=None, **kwargs)

 A JVM-based application consisting of a binary plus "extra files".
 
 Invoking the ``bundle`` goal on one of these targets creates a
 self-contained artifact suitable for deployment on some other machine.
 The artifact contains the executable jar, its dependencies, and
 extra files like config files, startup scripts, etc.


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param string binary: Target spec of the ``jvm_binary`` that contains the
   app main.
 :param bundles: One or more ``bundle``\s
   describing "extra files" that should be included with this app
   (e.g.: config files, startup scripts).
 :param string basename: Name of this application, if different from the
   ``name``. Pants uses this in the ``bundle`` goal to name the distribution
   artifact. In most cases this parameter is not necessary.

 Implemented by ``pants.backend.jvm.targets.jvm_binary.JvmApp``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_jvm_binary:

jvm_binary
-------------------------------------------------------------------------------

.. py:function:: jvm_binary(name=None, main=None, basename=None, source=None, deploy_excludes=None, deploy_jar_rules=None, **kwargs)

 Produces a JVM binary optionally identifying a launcher main class.
 
 Below are a summary of how key goals affect targets of this type:
 
 * ``bundle`` - Creates a self-contained directory with the binary and all
   its dependencies, optionally archived, suitable for deployment.
 * ``binary`` - Create an executable jar of the binary. On the JVM
   this means the jar has a manifest specifying the main class.
 * ``run`` - Executes the main class of this binary locally.


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param string main: The name of the ``main`` class, e.g.,
   ``'com.pants.examples.hello.main.HelloMain'``. This class may be
   present as the source of this target or depended-upon library.
 :param string basename: Base name for the generated ``.jar`` file, e.g.,
   ``'hello'``. (By default, uses ``name`` param)
 :param string source: Name of one ``.java`` or ``.scala`` file (a good
   place for a ``main``).
 :param resources: List of ``resource``\s to include in bundle.
 :param dependencies: Targets (probably ``java_library`` and
  ``scala_library`` targets) to "link" in.
 :type dependencies: list of target specs
 :param excludes: List of :ref:`exclude <bdict_exclude>`\s
   to filter this target's transitive dependencies against.
 :param deploy_excludes: List of :ref:`exclude <bdict_exclude>`\s to apply
   at deploy time.
   If you, for example, deploy a java servlet that has one version of
   ``servlet.jar`` onto a Tomcat environment that provides another version,
   they might conflict. ``deploy_excludes`` gives you a way to build your
   code but exclude the conflicting ``jar`` when deploying.
 :param deploy_jar_rules: :ref:`Jar rules <bdict_jar_rules>` for packaging this binary in a
   deploy jar.
 :param configurations: Ivy configurations to resolve for this target.
   This parameter is not intended for general use.
 :type configurations: tuple of strings

 Implemented by ``pants.backend.jvm.targets.jvm_binary.JvmBinary``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_keystore:

keystore
-------------------------------------------------------------------------------

.. py:function:: keystore(build_type=None, source=None, keystore_alias=None, keystore_password=None, key_password=None, **kwargs)

 Represents a keystore configuration


 :param string build_type: What type of package the keystore signs. Either 'debug' or 'release'.
 :param string source: path/to/keystore
 :param string keystore_alias: The alias of this keystore.
 :param string keystore_password: The password for the keystore.
 :param string key_password: The password for the key.

 Implemented by ``pants.backend.android.targets.keystore.Keystore``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_maven_layout:

maven_layout
-------------------------------------------------------------------------------

.. py:function:: maven_layout(ctx)



 Sets up typical maven project source roots for all built-in pants target types.
 
 Shortcut for ``source_root('src/main/java', *java targets*)``,
 ``source_root('src/main/python', *python targets*)``, ...
 
 :param string basedir: Instead of using this BUILD file's directory as
   the base of the source tree, use a subdirectory. E.g., instead of
   expecting to find java files in ``src/main/java``, expect them in
   ``**basedir**/src/main/java``.

 Implemented by ``pants.base.build_file_aliases.curry_context.pants.backend.maven_layout.maven_layout.maven_layout``


.. _bdict_netrc:

netrc
-------------------------------------------------------------------------------

.. py:function:: netrc()

 Fecthes username and passfrom from  ~/.netrc for logged in user.



 Implemented by ``pants.backend.authentication.netrc_util.Netrc``


.. _bdict_page:

page
-------------------------------------------------------------------------------

.. py:function:: page(source, resources=None, provides=None, **kwargs)

 Describes a single documentation page.
 
 Here is an example, that shows a markdown page providing a wiki page on an Atlassian Confluence
 wiki: ::
 
    page(name='mypage',
      source='mypage.md',
      provides=[
        wiki_artifact(wiki='address/of/my/wiki/target',
                      space='my_space',
                      title='my_page',
                      parent='my_parent'),
      ],
    )
 
 A ``page`` can have more than one ``wiki_artifact`` in its ``provides``
 (there might be more than one place to publish it).


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param source: Source of the page in markdown format.
 :param dependencies: Other targets that this target depends on.
 :type dependencies: list of target specs
 :param resources: An optional list of Resources objects.

 Implemented by ``pants.backend.core.targets.doc.Page``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_pants:

pants
-------------------------------------------------------------------------------



 In old Pants versions, a reference to a Pants targets.
 (In new Pants versions, just use strings.)




.. _bdict_pants_version:

pants_version
-------------------------------------------------------------------------------

.. py:function:: pants_version()



 Returns the pants semantic version number: http://semver.org/

 Implemented by ``pants.base.build_environment.pants_version``


.. _bdict_python_antlr_library:

python_antlr_library
-------------------------------------------------------------------------------

.. py:function:: python_antlr_library(module=None, antlr_version=u'3.1.3', *args, **kwargs)

 Generates a stub Python library from Antlr grammar files.


 :param name: Name of library
 :param module: everything beneath module is relative to this module name, None if root namespace
 :param antlr_version:
 :param sources: Source code files to compile. Paths are relative to the
   BUILD file's directory.
 :type sources: ``Fileset`` or list of strings
 :param resources: non-Python resources, e.g. templates, keys, other data (it is
     recommended that your application uses the pkgutil package to access these
     resources in a .zip-module friendly way.)
 :param dependencies: Other targets that this target depends on.
 :type dependencies: list of target specs
 :param dict exclusives: An optional dict of exclusives tags. See :ref:`howto_check_exclusives` for details.

 Implemented by ``pants.backend.codegen.targets.python_antlr_library.PythonAntlrLibrary``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_python_binary:

python_binary
-------------------------------------------------------------------------------

.. py:function:: python_binary(source=None, entry_point=None, inherit_path=False, zip_safe=True, always_write_cache=False, repositories=None, indices=None, ignore_errors=False, platforms=(), **kwargs)

 Produces a Python binary.
 
 Python binaries are pex files, self-contained executable shell
 scripts that contain a complete Python environment capable of
 running the target. For more information about pex files see
 http://pantsbuild.github.io/python-readme.html#how-pex-files-work.


 :param name: target name
 :param source: the python source file that becomes this binary's __main__.
   If None specified, drops into an interpreter by default.
 :param dependencies: Other targets that this target depends on.
 :type dependencies: list of target specs
 :param string entry_point: the default entry point for this binary.  if None, drops into the entry
   point that is defined by source. Something like
   "pants.bin.pants_exe:main", where "pants.bin.pants_exe" is the package
   name and "main" is the function name (if ommitted, the module is
   executed directly, presuming it has a ``__main.py__``).
 :param inherit_path: inherit the sys.path of the environment that this binary runs in
 :param zip_safe: whether or not this binary is safe to run in compacted (zip-file) form
 :param always_write_cache: whether or not the .deps cache of this PEX file should always
   be written to disk.
 :param repositories: a list of repositories to query for dependencies.
 :param indices: a list of indices to use for packages.
 :param ignore_errors: should we ignore inability to resolve dependencies?
 :param platforms: extra platforms to target when building this binary.
 :param compatibility: either a string or list of strings that represents
   interpreter compatibility for this target, using the Requirement-style format,
   e.g. ``'CPython>=3', or just ['>=2.7','<3']`` for requirements agnostic to interpreter class.
 :param dict exclusives: An optional dict of exclusives tags. See :ref:`howto_check_exclusives` for details.

 Implemented by ``pants.backend.python.targets.python_binary.PythonBinary``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_python_library:

python_library
-------------------------------------------------------------------------------

.. py:function:: python_library(address=None, sources=None, resources=None, resource_targets=None, provides=None, compatibility=None, **kwargs)

 Produces a Python library.
 
 :param name: Name of library
 :param sources: A list of filenames representing the source code this
    library is compiled from. Paths are relative to the
    BUILD file's directory.
 :param resources: non-Python resources, e.g. templates, keys, other data
    (it is
    recommended that your application uses the pkgutil package to access these
    resources in a .zip-module friendly way.)
 :param dependencies: Other targets that this target depends on.
    These dependencies may
    be other ``python_library``-like targets (``python_library``,
    ``python_thrift_library``, ``python_antlr_library`` and so forth) or
    ``python_requirement_library`` targets.
 :type dependencies: List of target specs
 :param provides:
   The :ref:`setup_py <bdict_setup_py>` to publish that represents this
   target outside the repo.
 :param compatibility: either a string or list of strings that represents
   interpreter compatibility for this target, using the Requirement-style
   format, e.g. ``'CPython>=3', or just ['>=2.7','<3']`` for requirements
   agnostic to interpreter class.
 :param exclusives: An optional dict of exclusives tags. See :ref:`howto_check_exclusives`
   for details.



 Implemented by ``pants.backend.python.targets.python_library.PythonLibrary``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_python_requirement:

python_requirement
-------------------------------------------------------------------------------

.. py:function:: python_requirement(requirement, name=None, repository=None, version_filter=None, use_2to3=False, compatibility=None)

 Pants wrapper around pkg_resources.Requirement
 
 Describes an external dependency as understood by ``easy_install`` or
 ``pip``. It takes
 a single non-keyword argument of the `Requirement`-style string, e.g. ::
 
     python_requirement('django-celery')
     python_requirement('tornado==2.2')
     python_requirement('kombu>=2.1.1,<3.0')
 
 Pants resolves the dependency *and its transitive closure*.
 For example, `django-celery` pulls also pulls down its
 dependencies: `celery>=2.5.1`, `django-picklefield>=0.2.0`, `ordereddict`,
 `python-dateutil`,
 `kombu>=2.1.1,<3.0`, `anyjson>=0.3.1`, `importlib`, and `amqplib>=1.0`.
 
 To let other Targets depend on this ``python_requirement``, put it in a
 :ref:`python_requirement_library <bdict_python_requirement_library>`.



 Implemented by ``pants.backend.python.python_requirement.PythonRequirement``


.. _bdict_python_requirement_library:

python_requirement_library
-------------------------------------------------------------------------------

.. py:function:: python_requirement_library(requirements=None, *args, **kwargs)

 Named target for some pip requirements.


 :param string name: The target name.
 :param requirements: pip requirements
 :type requirements: List of :ref:`python_requirement <bdict_python_requirement>`\s

 Implemented by ``pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_python_requirements:

python_requirements
-------------------------------------------------------------------------------

.. py:function:: python_requirements(ctx)



 Translates a pip requirements file into an equivalent set of python_requirements
 
 If the ``requirements.txt`` file has lines ``foo>=3.14`` and ``bar>=2.7``,
 then this is roughly like::
 
   python_requirement_library(name="foo", requirements=[
     python_requirement("foo>=3.14"),
   ])
   python_requirement_library(name="bar", requirements=[
     python_requirement("bar>=2.7"),
   ])
 
 NB some requirements files can't be unambiguously translated; ie: multiple
 find links.  For these files a ValueError will be raised that points out the issue.
 
 See the requirements file spec here: http://www.pip-installer.org/en/1.1/requirements.html
 
 :param parse_context: (Don't specify this in a BUILD file; it's set automatically)
 :param string requirements_relpath: The relative path from the parent dir of the BUILD file using
     this function to the requirements file.  By default a `requirements.txt` file sibling to the
     BUILD file is assumed.

 Implemented by ``pants.base.build_file_aliases.curry_context.pants.backend.python.python_requirements.python_requirements``


.. _bdict_python_test_suite:

python_test_suite
-------------------------------------------------------------------------------



 Deprecated way to group Python tests; use `dependencies`_




.. _bdict_python_tests:

python_tests
-------------------------------------------------------------------------------

.. py:function:: python_tests(coverage=None, **kwargs)

 Tests a Python library.


 :param name: See PythonLibrary target
 :param sources: Source code files to compile. Paths are relative to the
   BUILD file's directory.
 :type sources: ``Fileset`` or list of strings
 :param resources: See PythonLibrary target
 :param dependencies: Other targets that this target depends on.
 :type dependencies: list of target specs
 :param coverage: the module(s) whose coverage should be generated, e.g.
   'twitter.common.log' or ['twitter.common.log', 'twitter.common.http']
 :param dict exclusives: An optional dict of exclusives tags. See :ref:`howto_check_exclusives` for details.

 Implemented by ``pants.backend.python.targets.python_tests.PythonTests``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_python_thrift_library:

python_thrift_library
-------------------------------------------------------------------------------

.. py:function:: python_thrift_library(**kwargs)

 Generates a stub Python library from thrift IDL files.


 :param name: Name of library
 :param sources: thrift source files (If more than one tries to use the same
   namespace, beware https://issues.apache.org/jira/browse/THRIFT-515)
 :type sources: ``Fileset`` or list of strings. Paths are relative to the
   BUILD file's directory.
 :param resources: non-Python resources, e.g. templates, keys, other data (it is
   recommended that your application uses the pkgutil package to access these
   resources in a .zip-module friendly way.)
 :param dependencies: Other targets that this target depends on.
 :type dependencies: list of target specs
 :param dict exclusives: An optional dict of exclusives tags. See :ref:`howto_check_exclusives` for details.

 Implemented by ``pants.backend.codegen.targets.python_thrift_library.PythonThriftLibrary``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_repo:

repo
-------------------------------------------------------------------------------

.. py:function:: repo(url=None, push_db=None, **kwargs)

 An artifact repository, such as a maven repo.


 :param string name: Name of the repository.
 :param string url: Optional URL of the repository.
 :param string push_db: Path of the push history file.

 Implemented by ``pants.backend.jvm.targets.repository.Repository``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_resources:

resources
-------------------------------------------------------------------------------

.. py:function:: resources(address=None, sources=None, **kwargs)

 A set of files accessible as resources from the JVM classpath.
 
 Looking for loose files in your application bundle? Those are :ref:`bdict_bundle`\ s.
 
 Resources are Java-style resources accessible via the ``Class.getResource``
 and friends API. In the ``jar`` goal, the resource files are placed in the resulting `.jar`.


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param sources: Files to "include". Paths are relative to the
   BUILD file's directory.
 :type sources: ``Fileset`` or list of strings

 Implemented by ``pants.backend.core.targets.resources.Resources``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_rglobs:

rglobs
-------------------------------------------------------------------------------

.. py:function:: rglobs(parse_context)

 Recursive ``globs``, returns Fileset matching files in this directory and its "children.
 
 E.g., ``bundle().add(rglobs('config/*')),`` to bundle up all files in
 the config, config/foo, config/foo/bar directories.



 Implemented by ``pants.backend.core.wrapped_globs.RGlobs``


.. _bdict_scala_library:

scala_library
-------------------------------------------------------------------------------

.. py:function:: scala_library(java_sources=None, **kwargs)

 A collection of Scala code.
 
 Normally has conceptually-related sources; invoking the ``compile`` goal
 on this target compiles scala and generates classes. Invoking the ``bundle``
 goal on this target creates a ``.jar``; but that's an unusual thing to do.
 Instead, a ``jvm_binary`` might depend on this library; that binary is a
 more sensible thing to bundle.


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param sources: Source code files to compile. Paths are relative to the
   BUILD file's directory.
 :type sources: ``Fileset`` or list of strings
 :param java_sources: Java libraries this library has a *circular*
   dependency on.
   If you don't have the particular problem of circular dependencies
   forced by splitting interdependent java and scala into multiple targets,
   don't use this at all.
   Prefer using ``dependencies`` to express non-circular dependencies.
 :type java_sources: target spec or list of target specs
 :param provides: The ``artifact``
   to publish that represents this target outside the repo.
 :param dependencies: Other targets that this target depends on. If your
    code ``import``\s code from other places, it depends on them.
 :type dependencies: list of target specs
 :param excludes: List of :ref:`exclude <bdict_exclude>`\s
   to filter this target's transitive dependencies against.
 :param resources: An optional list of paths (DEPRECATED) or ``resources``
   targets containing resources that belong on this library's classpath.
 :param exclusives: An optional list of exclusives tags.

 Implemented by ``pants.backend.jvm.targets.scala_library.ScalaLibrary``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_scala_specs:

scala_specs
-------------------------------------------------------------------------------

.. py:function:: scala_specs(**kwargs)

 Tests a Scala library.


 :param name: The name of this module target, addressable via pants via the portion of the spec
   following the colon
 :param sources: Source code files to compile. Paths are relative to the
   BUILD file's directory.
 :type sources: ``Fileset`` or list of strings
 :param java_sources: Java libraries this library has a *circular*
   dependency on.
   Prefer using ``dependencies`` to express non-circular dependencies.
 :type java_sources: target spec or list of target specs
 :param provides:  The ``artifact``
   to publish that represents this target outside the repo.
 :param dependencies: Other targets that this target depends on.
 :type dependencies: list of target specs
 :param excludes: List of :ref:`exclude <bdict_exclude>`\s
   to filter this target's transitive dependencies against.
 :param resources: An optional list of Resources that should be in this target's classpath.
 :param exclusives: An optional map of exclusives tags. See :ref:`howto_check_exclusives` for details.

 Implemented by ``pants.backend.jvm.targets.scala_tests.ScalaTests``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_scala_tests:

scala_tests
-------------------------------------------------------------------------------



 Old name for `scala_specs`_




.. _bdict_scalac_plugin:

scalac_plugin
-------------------------------------------------------------------------------

.. py:function:: scalac_plugin(classname=None, plugin=None, *args, **kwargs)

 Defines a target that produces a scalac_plugin.


 :param name: The name of this module target, addressable via pants via the portion of the
   spec following the colon - required.
 :param classname: The fully qualified plugin class name - required.
 :param plugin: The name of the plugin which defaults to name if not supplied.
 :param sources: Source code files to compile. Paths are relative to the
   BUILD file's directory.
 :type sources: ``Fileset`` or list of strings
 :param java_sources: Java libraries this library has a *circular*
   dependency on.
   Prefer using ``dependencies`` to express non-circular dependencies.
 :type java_sources: target spec or list of target specs
 :param provides: The ``artifact``
   to publish that represents this target outside the repo.
 :param dependencies: Other targets that this target depends on.
 :type dependencies: list of target specs
 :param excludes: List of :ref:`exclude <bdict_exclude>`\s
   to filter this target's transitive dependencies against.
 :param resources: An optional list of paths (DEPRECATED) or ``resources``
   targets containing resources that belong on this library's classpath.
 :param exclusives: An optional map of exclusives tags. See :ref:`howto_check_exclusives` for details.

 Implemented by ``pants.backend.jvm.targets.scalac_plugin.ScalacPlugin``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_setup_py:

setup_py
-------------------------------------------------------------------------------

.. py:function:: setup_py(**kwargs)

 Represents a Python setup.py-based project.


 Passes params to `setuptools.setup <https://pythonhosted.org/setuptools/setuptools.html>`_.

 Implemented by ``pants.backend.python.python_artifact.PythonArtifact``

**Methods:**

 .. py:method:: with_binaries(*args, **kw)

  Add binaries tagged to this artifact.
  
  For example: ::
  
    provides = setup_py(
      name = 'my_library',
      zip_safe = True
    ).with_binaries(
      my_command = pants(':my_library_bin')
    )
  
  This adds a console_script entry_point for the python_binary target
  pointed at by :my_library_bin.  Currently only supports
  python_binaries that specify entry_point explicitly instead of source.
  
  Also can take a dictionary, e.g.
  with_binaries({'my-command': pants(...)})

.. _bdict_Skip:

Skip
-------------------------------------------------------------------------------

.. py:function:: Skip(apply_pattern)

 A rule that skips adding matched entries to a jar.



 Implemented by ``pants.backend.jvm.targets.jvm_binary.Skip``


.. _bdict_source_root:

source_root
-------------------------------------------------------------------------------

.. py:function:: source_root(parse_context)

 Allows registration of a source root for a set of targets.
 
 A source root is the base path sources for a particular language are found relative to.
 Generally compilers or interpreters for the source will expect sources relative to a base path
 and a source root allows calculation of the correct relative paths.
 
 E.g., a Java compiler probably expects to find ``.java`` files for
 ``package com.twitter.common.net`` in ``*something*/com/twitter/common/net``.
 The ``source_root`` command specifies that *something*.
 
 It is illegal to have nested source roots.



 Implemented by ``pants.base.source_root.SourceRoot``


.. _bdict_target:

target
-------------------------------------------------------------------------------

.. py:function:: target(*args, **kwargs)

 A set of dependencies that may be depended upon,
 as if depending upon the set of dependencies directly.
 
 NB: This class is commonly referred to by the alias 'target' in BUILD files.


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param dependencies: Other targets that this target depends on.
 :type dependencies: list of target specs
 :param exclusives: An optional map of exclusives tags. See :ref:`howto_check_exclusives`
   for details.

 Implemented by ``pants.backend.core.targets.dependencies.Dependencies``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_wiki:

wiki
-------------------------------------------------------------------------------

.. py:function:: wiki(name, url_builder, **kwargs)

 Target that identifies a wiki where pages can be published.


 :param string name: The name of this target, which combined with this
   build file defines the :doc:`target address <target_addresses>`.
 :param url_builder: Function that accepts a page target and an optional wiki config dict.
 :returns: A tuple of (alias, fully qualified url).

 Implemented by ``pants.backend.core.targets.doc.Wiki``

**Methods:**

 .. py:method:: with_description(description)

  Set a human-readable description of this target.
  
  :param description: Descriptive string

.. _bdict_wiki_artifact:

wiki_artifact
-------------------------------------------------------------------------------

.. py:function:: wiki_artifact(wiki, **kwargs)

 Binds a single documentation page to a wiki instance.
 
 This object allows you to specify which wiki a page should be published to, along with additional
 wiki-specific parameters, such as the title, parent page, etc.


 :param wiki: target spec of a ``wiki``.
 :param kwargs: a dictionary that may contain configuration directives for your particular wiki.
   For example, the following keys are supported for Atlassian's Confluence:
 
   * ``space`` -- A wiki space in which to place the page (used in Confluence)
   * ``title`` -- A title for the wiki page
   * ``parent`` -- The title of a wiki page that will denote this page as a child.

 Implemented by ``pants.backend.core.targets.doc.WikiArtifact``


.. _bdict_zglobs:

zglobs
-------------------------------------------------------------------------------

.. py:function:: zglobs(parse_context)

 Returns a Fileset that matches zsh-style globs, including ``**/`` for recursive globbing.
 
 Uses ``BUILD`` file's directory as the "working directory".



 Implemented by ``pants.backend.core.wrapped_globs.ZGlobs``




